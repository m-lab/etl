partition_date:
  Description: The date when each measurement was conducted in UTC.

GitShortCommit:
  Description: GitShortCommit is the Git commit (short form) of the running
    server code.
Version:
  Description: Version is the symbolic version (if any) of the running server
    code.
ServerIP:
  Description: The IP address assigned to the M-Lab server that conducted the measurement.
ServerPort:
  Description: The port used by the server to conduct the measurement.
ClientIP:
  Description: The IP address assigned to the client that conducted the measurement.
ClientPort:
  Description: The port used by the client to conduct the measurement.
StartTime:
  Description: The date and time when the measurement began in UTC.
EndTime:
  Description: The date and time when the measurement ended in UTC.
Control:
  Description: Metadata for TCP connections to the NDT5 control channel. All
    NDT5 measurements have a control channel.
Control.UUID:
  Description: The Universally Unique Identifier for the measurement's control channel.
Control.Protocol:
  Description: The protocol used for S2C and C2S measurements. Values include WS, WSS, and PLAIN.
Control.MessageProtocol:
  Description: Individual messages are sent with the MessageProtocol. Values
    include JSON, TLV.
Control.ClientMetadata:
  Description: Client-reported metadata as name/value pairs.
Control.ClientMetadata.Name:
  Description: If set, contains text that identifies and provides context for the corresponding metadata value. For example, "OS" or "clientApplication"
Control.ClientMetadata.Value:
  Description: If set, contains a value corresponding to metadata name. For example, "Windows 10" or "ndtJS"

C2S:
  Description: Metadata for Client-to-Server (upload) measurements performed using the ndt5 protocol.
C2S.ServerIP:
  Description: The IP address assigned to the M-Lab server that conducted the measurement.
C2S.ServerPort:
  Description: The port used by the server to conduct the upload measurement.
C2S.ClientIP:
  Description: The IP address assigned to the client that conducted the measurement.
C2S.ClientPort:
  Description: The port used by the client to conduct the upload measurement.
C2S.UUID:
  Description: The Universally Unique Identifier assigned to the upload measurement.
C2S.MeanThroughputMbps:
  Description: The upload rate as calculated by the server. Presented in megabits per second, or Mbit/s, this value is the average of tcp-info snapshots taken at the beginning and end of an ndt5 measurement. Therefore it is identified as "MeanThroughputMbps".
S2C.Error:
  Description: Any error message(s) recorded during a download measurement.

S2C:
  Description: Metadata for Server-to-Client (download) measurements performed using the ndt5 protocol.
S2C.UUID:
  Description: The Universally Unique Identifier assigned to the download measurement.
S2C.ServerIP:
  Description: The IP address assigned to the M-Lab server that conducted the measurement.
S2C.ServerPort:
  Description: The port used by the server to conduct the download measurement.
S2C.ClientIP:
  Description: The IP address assigned to the client that conducted the measurement. 
S2C.ClientPort:
  Description: The port used by the client to conduct the download measurement.
S2C.StartTime:
  Description: The date and time when the download measurement began in UTC.
S2C.EndTime:
  Description: The date and time when the download measurement ended in UTC.
S2C.MeanThroughputMbps:
  Description: The download rate as calculated by the server. Saved in megabits per second, or Mbit/s, this value is the average of tcp-info snapshots taken at the beginning and end of an ndt5 measurement. Therefore it is identified as "MeanThroughputMbps".
S2C.MinRTT:
  Description: The minimum RTT observed during the download measurement, recorded in milliseconds.
S2C.MaxRTT:
  Description: The maximum sampled round trip time, recorded in milliseconds.
S2C.SumRTT:
  Description: The sum of all sampled round trip times, recorded in milliseconds.
S2C.CountRTT:
  Description: The number of round trip time samples included in S2C.SumRTT, reported in milliseconds.
S2C.ClientReportedMbps:
  Description: The download rate as calculated by the client, in megabits per secont, or Mbit/s. Not all clients report this value.
S2C.TCPInfo:
  Description: The TCPInfo record provides results from the TCP_INFO netlink socket.
S2C.TCPInfo.State:
  Description: TCP state is nominally 1 (Established). Other values reflect transient states having incomplete rows. Kernel reference-- See `TCP_ESTABLISHED` `in include/net/tcp_states.h`
S2C.TCPInfo.CAState:
  Description: Loss recovery state machine. For traditional loss based congestion control algorithms, CAState is also used to control window adjustments. Kernel refernece-- `tcp_set_ca_state` in `include/net/tcp.h`
S2C.TCPInfo.Retransmits:
  Description: Number of timeouts (RTO based retransmissions) at this sequence. Reset to zero on forward progress. Kernel reference-- `icsk_retransmits` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.Probes:
  Description: Consecutive zero window probes that have gone unanswered Kernel reference-- `icsk_probes_out` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.Backoff:
  Description: Exponential timeout backoff counter. Increment on RTO, reset on successful RTT measurements. Kernel reference-- `icsk_backoff` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.Options:
  Description: Bit encoded SYN options and other negotiations TIMESTAMPS 0x1; SACK 0x2; WSCALE 0x4; ECN 0x8 - Was negotiated; ECN_SEEN - At least one ECT seen; SYN_DATA - SYN-ACK acknowledged data in SYN sent or rcvd. Kernel reference-- `TCPI_OPT_TIMESTAMPS` in `include/uapi/linux/tcp.h`
S2C.TCPInfo.WScale:
  Description: BUG Conflation of SndWScale and RcvWScale. See github.com/m-lab/etl/issues/790
S2C.TCPInfo.AppLimited:
  Description: Flag indicating that rate measurements reflect non-network bottlenecks. Note that even very short application stalls invalidate max_BW measurements. Kernel reference-- `rate_app_limited` in `include/linux/tcp.h`
S2C.TCPInfo.RTO:
  Description: Retransmission Timeout. Quantized to system jiffies. Kernel reference-- `icsk_rto` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.ATO:
  Description: Delayed ACK Timeout. Quantized to system jiffies. Kernel reference-- `ato` in `icsk_ack` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.SndMSS:
  Description: Current Maximum Segment Size. Note that this can be smaller than the negotiated MSS for various reasons. Kernel reference-- `mss_cache` in `include/linux/tcp.h`
S2C.TCPInfo.RcvMSS:
  Description: Maximum observed segment size from the remote host. Used to trigger delayed ACKs. Kernel reference-- `rcv_mss` in `icsk_ack` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.Unacked:
  Description: Number of segments between `snd.nxt` and `snd.una`. Accounting for the Pipe algorithm. Kernel reference-- `packets_out` in `include/linux/tcp.h`
S2C.TCPInfo.Sacked:
  Description: Scoreboard segment marked SACKED by sack blocks. Accounting for the Pipe algorithm. Kernel reference-- `sacked_out` in `include/linux/tcp.h`
S2C.TCPInfo.Lost:
  Description: Scoreboard segments marked lost by loss detection heuristics. Accounting for the Pipe algorithm. Kernel reference-- `lost_out` in `include/linux/tcp.h`
S2C.TCPInfo.Retrans:
  Description: Scoreboard segments marked retransmitted. Accounting for the Pipe algorithm. Kernel reference-- `retrans_out` in `include/linux/tcp.h`
S2C.TCPInfo.Fackets:
  Description: 
S2C.TCPInfo.LastDataSent:
  Description: Time since last data segment was sent. Quantized to jiffies. Kernel reference-- `lsndtime` in `include/linux/tcp.h`
S2C.TCPInfo.LastAckSent:
  Description: Time since last ACK was sent (not implemented). Present in TCP_INFO but not elsewhere in the kernel.
S2C.TCPInfo.LastDataRecv:
  Description: Time since last data segment was received. Quantized to jiffies. Kernel reference-- `lrcvtime` in `icsk_ack` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.PMTU:
  Description: Maximum IP Transmission Unit for this path. Kernel reference-- `icsk_pmtu_cookie` in `include/net/inet_connection_sock.h`
S2C.TCPInfo.RcvSsThresh:
  Description: Current Window Clamp. Receiver algorithm to avoid allocating excessive receive buffers. Kernel reference-- `rcv_ssthresh` in `include/linux/tcp.h`
S2C.TCPInfo.RTT:
  Description: Smoothed Round Trip Time (RTT). The Linux implementation differs from the standard. Kernel reference-- `srtt_us` in `include/linux/tcp.h`
S2C.TCPInfo.RTTVar:
  Description: RTT variance. The Linux implementation differs from the standard. Kernel reference-- `mdev_us` in `include/linux/tcp.h`
S2C.TCPInfo.SndSsThresh:
  Description: Slow Start Threshold. Value controlled by the selected congestion control algorithm. Kernel reference-- `snd_ssthresh` in `include/linux/tcp.h`
S2C.TCPInfo.SndCwnd:
  Description: Congestion Window. Value controlled by the selected congestion control algorithm. Kernel reference-- `snd_cwnd` in `include/linux/tcp.h`
S2C.TCPInfo.AdvMSS:
  Description: Advertised MSS. Kernel reference-- `advmss` in `include/linux/tcp.h`
S2C.TCPInfo.Reordering:
  Description: Maximum observed reordering distance. Kernel reference-- `reordering` in `include/linux/tcp.h`
S2C.TCPInfo.RcvRTT:
  Description: Receiver Side RTT estimate. Kernel reference-- `rcv_rtt_est.rtt_us` in `include/linux/tcp.h`
S2C.TCPInfo.RcvSpace:
  Description: Space reserved for the receive queue. Typically updated by receiver side auto-tuning. Kernel reference-- `space` in `rcvq_space` in `include/linux/tcp.h`
S2C.TCPInfo.TotalRetrans:
  Description: Total number of segments containing retransmitted data. Kernel reference-- `total_retrans` in `include/linux/tcp.h`
S2C.TCPInfo.PacingRate:
  Description: Current Pacing Rate, nominally updated by congestion control. Kernel reference-- `sk_pacing_rate` in `include/net/sock.h`
S2C.TCPInfo.MaxPacingRate:
  Description: Settable pacing rate clamp. Set with setsockopt( ..SO_MAX_PACING_RATE.. ). Kernel reference-- `sk_max_pacing_rate` in `include/net/sock.h`
S2C.TCPInfo.BytesAcked:
  Description: The number of data bytes for which cumulative acknowledgments have been received. Kernel reference-- `bytes_acked` in `include/linux/tcp.h`
S2C.TCPInfo.BytesReceived:
  Description: The number of data bytes for which have been received. Kernel reference-- `bytes_received` in `include/linux/tcp.h`
S2C.TCPInfo.SegsOut:
  Description: The number of segments transmitted. Includes data and pure ACKs. Kernel reference-- `segs_out` in `include/linux/tcp.h`
S2C.TCPInfo.SegsIn:
  Description: The number of segments received. Includes data and pure ACKs. Kernel reference-- `segs_in` in `include/linux/tcp.h`
S2C.TCPInfo.NotsentBytes:
  Description: Number of bytes queued in the send buffer that have not been sent. Kernel reference-- `tcpi_notsent_bytes()` in `net/ipv4/tcp.c`
S2C.TCPInfo.MinRTT:
  Description: Minimum Round Trip Time. From an older, pre-BBR algorithm. Kernel reference-- `tcp_min_rtt` in `include/net/tcp.h`
S2C.TCPInfo.DataSegsIn:
  Description: Input segments carrying data (len>0). Kernel reference-- `data_segs_in` in `include/net/tcp.h`
S2C.TCPInfo.DataSegsOut:
  Description: Transmitted segments carrying data (len>0). Kernel reference-- `data_segs_out` in `include/net/tcp.h`
S2C.TCPInfo.DeliveryRate:
  Description: Observed Maximum Delivery Rate. Kernel reference-- `tcp_compute_delivery_rate()` in `net/ipv4/tcp.c`
S2C.TCPInfo.BusyTime:
  Description: Time with outstanding (unacknowledged) data. Time when `snd.una` is not equal to `snd.next`. Kernel reference-- `tcp_get_info_chrono_stats()` in `net/ipv4/tcp.c`
S2C.TCPInfo.RWndLimited:
  Description: Time spend waiting for receiver window. Kernel reference-- `tcp_get_info_chrono_stats()` in `net/ipv4/tcp.c`
S2C.TCPInfo.SndBufLimited:
  Description: Time spent waiting for sender buffer space. This only includes the time when TCP transmissions are starved for data, but the application has been stopped because the buffer is full and can not be grown for some reason. Kernel reference-- `tcp_get_info_chrono_stats()` in `net/ipv4/tcp.c`
S2C.TCPInfo.Delivered:
  Description: Data segments delivered to the receiver including retransmits. As reported by returning ACKs, used by ECN. Kernel reference-- `delivered` in `include/linux/tcp.h`
S2C.TCPInfo.DeliveredCE:
  Description: ECE marked data segments delivered to the receiver including retransmits. As reported by returning ACKs, used by ECN. Kernel reference-- `delivered_ce` in `include/linux/tcp.h`
S2C.TCPInfo.BytesSent:
  Description: Payload bytes sent (excludes headers, includes retransmissions). Kernel reference-- `bytes_sent`
S2C.TCPInfo.BytesRetrans:
  Description: Bytes retransmitted. May include headers and new data carried with a retransmission (for thin flows). Kernel reference-- `bytes_retrans`
S2C.TCPInfo.DSackDups:
  Description: Duplicate segments reported by DSACK. Not reported by some Operating Systems. Kernel reference-- `dsack_dups`
S2C.TCPInfo.ReordSeen:
  Description: Received ACKs that were out of order. Estimates reordering on the return path. Kernel reference-- `reord_seen`
S2C.Error:
  Description: Any error message(s) recorded during a download measurement.
