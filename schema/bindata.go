// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// descriptions/NDTResultRow.yaml
// descriptions/PTTest.yaml
// descriptions/README.md
// descriptions/TCPRow.yaml
// descriptions/toplevel.yaml
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ndtresultrowYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4b\x6b\xe3\x3c\x14\xdd\xe7\x57\x1c\xba\xea\x07\xa9\x3f\x08\xcc\xa6\xbb\xe2\xc0\xd0\xa1\xc9\x84\xd8\x49\xd7\x8a\x74\x13\x0b\xf4\x30\x7a\xb8\xf4\xdf\x0f\x92\xed\xc9\x24\x6e\xda\x45\xb7\xf7\x5a\xe7\x71\xcf\xc1\x3f\x65\xa8\x1a\xeb\x42\x69\xb5\x96\xe1\x71\x06\x2c\xc9\x73\x27\xdb\x20\xad\x79\xc4\xe5\x1a\xd2\x23\x34\x94\xa6\xe0\xfd\xe4\xde\xa7\x35\x8e\xd6\xe9\xff\x60\x8f\x79\xed\xa2\x31\xd2\x9c\x66\x00\xe0\xc9\x75\xe4\xc0\xad\xa0\x62\xb6\x27\xe7\x13\xec\x35\xcb\x30\x1f\xe1\xfd\xbb\x3e\x58\x25\x39\xba\x61\x7e\x2f\x8f\x60\xe6\xfd\x9a\x60\x00\xcf\x3c\x3d\xc1\xac\xb4\x26\x38\xab\x26\x0c\x2b\x0a\x4c\xb0\xc0\x92\x50\xd4\xe5\x06\xdc\x1a\x43\x3c\x2d\x3d\x82\xcd\xa8\xeb\x65\xfd\x23\xcd\x13\x00\x78\xc3\x8c\x21\x55\xe0\x49\xa9\x4c\x90\xb7\x9a\x98\x8f\x8e\x34\x99\xe0\xd1\xb0\x8e\xc0\x26\x2f\x46\x0d\xc5\x6e\xf7\xbc\x9c\x08\x49\xc3\x2c\xe2\xe6\xb3\x8d\xb3\xc1\xf2\x0f\x3c\x8c\x0b\x44\x4f\x22\x63\x54\x8b\x12\xcc\x08\x94\x8b\xea\x42\x5a\x81\x3d\x53\x91\x3c\xa4\xe1\x2a\x0a\xc2\x6b\x35\xcf\x26\x5e\xab\x6a\x9e\x5f\x6c\x5e\x9e\x9e\xd7\x67\xce\x15\x79\xcf\x4e\x74\x93\xfa\xd9\x08\xd9\x49\x11\x99\x82\xee\x3f\xf5\x60\x8e\xe0\xc9\x04\xbc\xc9\xd0\xe4\x03\x5e\xa1\x8c\x2a\x32\xf3\xa8\xe4\x57\xf5\x7b\x3d\x47\xfd\xb2\x3f\x93\x97\x4a\x92\x09\x63\x42\x13\xee\x7e\xfd\xe0\xa8\xb5\x2e\x90\x80\x1e\xa3\x64\x1e\x86\x69\xfa\xbf\x4b\x2c\x68\x99\x74\x3e\x35\x60\x51\x7d\x9e\xfe\x80\x17\xec\x43\xd5\x77\xf3\x22\xd4\x96\x5c\xea\x32\x09\x44\x9f\x2a\x16\x1a\x3a\xc7\xdf\x0e\xce\xe6\xa0\xe2\x54\xe0\x6e\xd7\x2a\xcb\xc4\x5d\x91\x48\xbf\x88\x3b\x45\x74\xd9\xbb\xfe\xd5\x8a\x98\xa9\x1b\x67\xe3\xa9\x69\x63\x58\x1d\x5a\x3f\xc1\x18\x64\x72\xa6\x78\x54\x2c\x9d\x80\x75\xe4\xd8\x89\x10\x33\x3f\x1c\x0b\xa9\xfb\xd5\xa2\xfc\xdc\x79\x0f\x94\x9c\xf7\x37\xf8\x86\xf3\xa5\x7d\x33\x83\xf7\x6a\x51\x7e\xe1\x3d\xd5\xf4\xda\x7b\x7a\xf5\x2d\xef\x62\x50\x30\xb8\xcf\x78\xd2\x6c\xeb\x7a\x82\x51\x37\x04\x2d\x8d\xd4\x51\x63\x5b\xd7\xb0\x87\xfc\xdf\x10\x10\xd1\x0d\x46\xcf\x68\xff\x9c\xa4\x07\xed\x4f\xb5\x1d\xda\xf7\xa1\xc8\x44\xc0\xfb\x8b\xfe\x6d\xe9\x0d\x99\x7f\x02\x00\x00\xff\xff\x64\xad\xf8\x58\x6f\x05\x00\x00")

func ndtresultrowYamlBytes() ([]byte, error) {
	return bindataRead(
		_ndtresultrowYaml,
		"NDTResultRow.yaml",
	)
}

func ndtresultrowYaml() (*asset, error) {
	bytes, err := ndtresultrowYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NDTResultRow.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pttestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func pttestYamlBytes() ([]byte, error) {
	return bindataRead(
		_pttestYaml,
		"PTTest.yaml",
	)
}

func pttestYaml() (*asset, error) {
	bytes, err := pttestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PTTest.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x4f\x8f\xdb\x46\x0c\xc5\xef\xfa\x14\x0f\xe8\x25\x09\x6c\x2d\xd0\x16\x3d\xf4\xb6\x49\x10\xc0\x68\x5c\xa0\xd9\x04\x68\x8f\xd4\x0c\x25\x11\x19\x0d\x15\x0e\x65\xaf\xbe\x7d\x31\x92\x9d\x3f\xc8\xc1\xc0\x78\x44\xfe\xc8\xf7\xc8\xf9\x05\xef\x84\x53\xc4\x5b\x2e\xc1\x64\x76\xd1\x5c\x9a\xe6\xe3\x28\x05\x51\x8c\x83\xab\xad\x08\x9a\x9d\x24\x17\xbc\x96\xe1\x9f\x85\x6d\xfd\x39\x09\xff\x3d\x9e\xdf\xa3\x97\xc4\x05\xbd\x1a\x4a\x18\x79\xa2\x26\x72\x2f\x59\x36\x2a\x24\x63\x10\x1f\x97\xae\x0d\x3a\x3d\x4c\xc7\x44\xdd\x03\x7b\x7a\xd8\x43\xdb\x5a\x95\xb7\x52\x9c\x1d\xda\xc3\x47\x2e\x7c\x43\x96\x51\x97\x14\xd1\x71\x85\x4f\xe4\xce\x11\x54\xd0\x7d\x79\x6e\x9f\xb6\xf4\xb7\x1a\x0a\x7a\xd3\xa9\xa6\x35\x3f\xd5\x19\xf4\xa1\xfb\xf2\x8c\x99\xc2\x67\x1a\xb8\x6d\x9a\xf3\x92\x5c\xe6\x74\xe7\x07\xca\x15\x4e\xf3\x9c\x84\x23\x5c\x2b\x06\x85\x26\xc6\x0f\xed\x7d\xe6\xb5\x80\x8c\x6b\xf1\x5e\x53\xd2\x6b\xf9\xb3\x79\xf5\x83\x11\x47\x3c\xd6\x76\xcd\x0f\x98\xb5\x14\xe9\xd2\x0a\xc9\x41\xa7\x39\xb1\xf3\x01\xf1\xbb\x58\xed\x41\xe8\xab\x97\x15\x22\x25\x2c\xa5\xec\x8c\x77\xc6\xbb\x56\xc4\x6f\xd7\x35\x3c\xaf\xfb\xaf\xcc\x1c\xee\x36\xed\x08\xf8\x48\xbe\x29\xc9\xea\x4d\xc7\x88\x1c\x97\xc0\x71\xb7\x45\x7d\x64\xdb\xfa\x6f\x9b\x57\xf8\x94\xc5\x0b\x8e\x38\xf5\xd0\x49\xaa\x9d\x87\x0a\x5a\x37\x6d\x7c\xa9\x13\x08\xba\x64\x2f\x78\x21\x2d\xb7\x60\x33\xb5\xdb\xd5\xcb\x0a\xf8\xc0\x3d\x1b\xe7\xc0\x38\xe2\xd3\x87\xf7\xd5\x31\x42\xd4\xb0\x4c\x35\x77\xd7\xd8\x49\x1e\x40\xb5\x23\xcd\x12\x28\xe1\xc2\xf6\x55\x47\x1a\xd4\xc4\xc7\xa9\xe1\xe7\x59\x0b\x47\x74\x2b\xbc\xae\x9d\xe4\xe2\xb6\x61\x5a\xe0\x2f\xb6\xcc\x09\x41\x23\x63\xe0\xcc\x46\x29\xad\x88\xca\xa5\x8a\xc4\x44\x1e\x46\xf0\x33\x05\x4f\x6b\x6d\xeb\x16\x7f\xbc\x1f\x2e\x64\x42\x5d\xe2\xc3\xcd\x22\x35\xf4\x4b\x0e\x9b\xf9\x2f\xb6\x3d\x65\xb2\x30\xd6\x46\x8b\x2e\x16\xb8\xbc\x04\xe5\xb8\x6d\x45\x73\x15\x1f\x31\x9b\x4c\x64\x2b\xbe\x6d\x72\xad\xf3\x74\x3e\xf9\x3a\x57\xf1\x4f\x6e\x4b\xf0\xc5\x38\xe2\x4c\x99\x06\xde\x0c\x38\xe5\x7d\x4f\x6b\x9d\x1a\x78\xc0\x75\x64\x63\xc8\x34\xab\x39\x65\x6f\x9b\x37\x8b\x19\x67\x4f\xeb\x57\x98\xe6\xb4\x22\x50\x4a\x05\xba\x38\xde\x54\xb7\xd9\x7e\xfb\x75\xeb\xe8\xf6\xef\x8f\xdf\x71\x1d\x25\x8c\x18\xe9\xc2\xd0\x0b\x5b\x9f\xf4\xda\x14\x9e\x28\xbb\x84\xb2\x7f\x6d\xea\x18\xa3\xf4\xdb\x8c\x7c\x5f\x80\xd7\x32\x60\x7f\xbc\x15\x47\x29\x61\x36\x1d\x8c\xa6\xa9\xaa\x4f\x94\x87\x85\x06\x2e\x2d\x70\xca\x77\xaf\x71\xa1\xb4\x70\x69\xb6\xcd\xa2\x79\x66\xb2\x3a\xe9\x8e\x91\x79\x20\x97\x4b\x3d\xec\xef\xa5\x63\x74\x42\xb7\x41\x52\xae\xd1\xa6\xb3\x09\x39\xe3\xfc\xf8\xef\xe9\xef\x8f\x6d\xf3\x7f\x00\x00\x00\xff\xff\x74\x8f\xba\x6f\x6d\x04\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tcprowYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\xdb\x72\xdb\x38\xd2\xbe\xcf\x53\x74\xcd\xcd\x6f\x57\xd9\xca\x61\x32\x99\x24\x7f\xd5\xa6\x64\x59\x99\x75\x25\x3e\x8c\xc8\xc4\x3b\x57\x2c\x08\x68\x49\x18\x81\x00\x03\x80\x92\x95\xa7\xdf\x6a\x90\x94\x68\x92\xb2\xe4\xac\x95\xad\xbd\x93\x25\x10\xdd\x5f\xa3\x0f\x5f\x37\xe8\x78\x70\x73\xa1\x27\xe6\xfd\x33\x80\x73\x74\xdc\xca\xcc\x4b\xa3\xdf\xc3\x08\x5d\xae\xbc\x83\x89\x35\x29\x4c\xd1\x3b\xc3\xe7\x26\xf3\x47\xbd\x5e\x3c\xb8\x49\x2e\xae\x3e\x5e\xf7\x7a\xc7\xcf\xca\xa7\x7b\x91\x67\x1e\x5b\x7b\xc4\x83\x1b\x08\xbf\xd0\x0f\xd2\xf1\xdc\xb9\xf0\xfd\x85\x86\xcb\xcf\x6c\x0c\x82\x79\x16\x16\x39\x5a\x04\xd2\x81\x36\xa9\xd4\x4c\xa9\x15\xbc\x84\xa3\xa1\xf3\x6c\xac\xa4\x9b\xa1\x38\xee\x3d\x03\x00\xb8\xf6\x33\xb4\xb0\x60\x2a\x47\x07\x16\x27\x0a\xb9\x07\x6f\x99\x76\x12\xb5\x2f\xb6\x71\x30\x63\x0b\xa9\xa7\x20\x35\x37\x69\xa6\xd0\x23\x58\xb3\x74\xb4\xc3\x08\x27\x68\x51\x73\x7c\x0f\xa3\x8f\x03\xf8\xfd\xdd\xcb\x67\x00\x9f\xd0\x6a\x54\xef\x21\x42\x24\x65\x92\x61\x14\xf7\xcf\x3e\x5f\x44\xff\x1c\x9e\x83\xd4\xb4\x8d\xca\x05\x3e\xd7\xe8\x9f\x7b\x9e\x25\x85\x90\xde\x6c\x8d\x7d\xd0\xef\x46\xff\xd9\x38\x52\x92\x9b\x05\xda\x55\x09\x31\x65\x7c\x26\x75\xd3\x1e\x1f\x8d\x25\x14\x42\xd2\x83\x4c\x81\xa2\x27\xc7\xcc\xa1\x00\x6e\xf4\x14\x1d\x7d\x4f\x1f\xbd\x35\x0a\x98\x9a\x1a\x2b\xfd\x2c\x75\x27\x50\xca\x06\xe9\x82\x7d\x98\x72\x06\x72\x7a\xce\x9b\xf5\xfa\xa5\xd4\xc2\x2c\x81\x89\xbf\x73\xe7\x53\xd4\xbe\x69\x0a\x18\x98\x34\x7c\x4f\x70\x09\xa6\xcc\x16\xaf\x03\x56\xa9\xb3\xdc\xf7\x78\xcd\x48\xc1\x02\xe8\x13\xce\x92\xf2\xd0\x5a\x16\xaa\x99\x66\x84\xe1\x70\x52\xe9\x5d\xcb\x3c\x57\x79\x3a\x46\x0b\x66\x02\x5e\xa6\x68\x72\xef\xe0\x68\x14\x5f\x97\xb8\x6d\xf5\x64\x30\x91\x3b\x06\xe6\xc1\xcf\xa4\x03\x87\xdf\x72\x52\xbb\xd7\xb0\xe1\x08\x1d\x7a\x82\xfd\x1d\xad\x01\xa3\x61\x62\xec\x92\x59\x01\x99\x35\x53\x8b\xce\xd5\x40\x48\xee\xe6\x89\xdd\xe8\xd6\x04\x21\x35\x21\x34\x5a\x23\x27\x5d\x13\xf2\xfd\x1a\xaa\x1b\x6b\xc6\xd8\x06\x34\x30\xda\x21\xcf\xbd\x5c\x60\xa1\x44\x69\xf8\x2c\x2c\x07\x3f\x63\x9e\x5c\x13\x61\x6a\x34\x42\xae\x99\x76\x4b\xb4\x28\x76\xf9\x65\xd0\xb6\xd8\x24\x31\xb9\x7f\xa4\xb2\x67\x8c\xcf\xcd\x64\xd2\xd2\x76\x78\x97\x19\x8d\xda\x4b\xa6\xaa\x03\x80\x71\xb1\x16\xb8\xc9\xb5\x47\xdb\x8a\x5a\x6e\x91\xfc\x84\xac\x3b\x8a\xaf\x4f\xc0\x06\x9b\x1b\x0d\x2e\xe7\x1c\x9d\x9b\xe4\x0a\x46\x71\x0c\x29\x32\x97\x17\x6b\x83\xaf\xdd\x43\x52\x09\x79\x1c\x8c\xeb\xa0\x76\xdb\xe8\x67\xd2\x03\x6a\x6e\x04\x0a\x88\xfe\xba\x02\x53\xac\x03\xa6\x05\x98\x90\x2d\x34\x4e\x8d\x97\x2c\x7c\xdd\x40\xf4\x4b\x08\x9a\xf8\xe2\x92\x42\xfe\xf2\x26\x82\x17\x77\x2f\xff\x3f\x7c\x17\xf5\x07\x9f\xe0\xc5\xdd\xab\xe2\xaf\xdb\x68\xd0\xff\x3c\x84\x17\x77\xaf\x8b\xbf\x87\x83\x2b\x78\x71\xf7\x16\x4e\xe1\x96\xb9\xb5\x00\x14\xeb\x5f\x93\x68\x38\xbc\x82\x53\xe8\x7b\x50\xc8\x1c\xd9\x08\x61\x38\x88\xc1\x21\xea\x52\xc2\x5f\x57\xc9\x79\x3f\xee\xc3\x29\x7d\x3c\x25\x79\x8c\xcf\xb5\x59\x2a\x14\x53\x14\x45\x6e\x94\x3a\x80\x72\xc1\xe8\x16\x2c\x5f\x88\x5f\x6a\xf6\x24\xe3\x24\xd7\x37\x71\x52\x83\x50\x33\x6b\xce\x32\xf9\x5c\x49\x9d\xdf\x35\xc2\xf2\x36\xe2\x4c\xb5\x13\xd6\xd9\x97\x3f\xc8\x89\x27\x2a\x18\x8b\x22\x33\xd2\xa2\x58\x1b\xec\x39\xe2\x8b\xe2\xaf\x86\x19\x29\x71\x4e\xa5\x9f\xe5\xe3\x1e\x37\xe9\xf3\xf4\x54\xb1\xf1\x73\xf4\xea\xb9\x74\x2e\x47\xf7\xfc\xf7\x77\x2f\x36\x85\xa2\xda\xb1\x25\xfd\xb6\x88\x16\x17\xc4\x85\x1c\x36\x5e\x81\x9f\x21\x28\xc3\x99\x22\x1b\x08\xb4\x14\xe0\x02\xe9\xb8\xc1\xe1\xb4\xb7\xd4\x22\x18\xf3\xab\x74\x72\x4c\x5a\x3a\x28\x76\x3f\x81\x0c\xb5\xa0\x2a\xb0\x4b\xb1\x76\xf0\xfd\xfa\xea\xd7\x9a\x8d\x9d\x16\xc9\xb2\x50\xaa\x66\xda\x2e\xab\xae\xcd\xf3\x58\x68\x16\x39\xca\x45\x01\xae\xf0\xe5\x1a\xb8\xba\xa1\x63\x4a\x80\xd2\x81\x40\x8f\x36\x95\x7a\xb3\x91\x43\x4b\x1b\x70\xa3\x27\x72\x7a\x12\x4e\x4b\x23\xb3\x6a\x45\x5f\x39\xcf\xb4\xa7\x7c\x18\xaa\x6e\x30\xd8\x20\xb7\x16\xb5\x57\x2b\xd0\xc6\x03\x0b\xd1\x1b\x2c\xf8\x83\xe6\xaa\xac\x65\xf9\x62\x4f\x6b\xf5\xb3\xec\xb3\x4c\xa5\x47\xd1\x32\xd7\x47\xc5\xa8\x7a\x0b\xc9\x99\xa7\x23\x0c\x99\xd3\x86\xf2\x59\x4b\x2c\xeb\xfa\xaf\x8d\x3e\xd5\xe8\x97\xc6\xce\x61\x6c\xbc\x57\xa8\x91\xcf\x9b\xb1\x7e\x65\x3c\x16\x3b\xe1\x02\x35\x14\x35\x79\x66\xac\x07\x96\x65\x2a\x88\xa2\x44\xe6\x99\x52\x54\x0f\x16\x4c\x49\x51\x54\xec\xbb\xe4\xec\x76\x6b\x4a\x23\xb5\x12\x96\x65\x89\x2a\xc0\xec\x74\x92\xf8\xba\x83\x6a\xd5\x6b\x1d\xc4\x45\x36\x6e\xe8\xff\x67\xce\xb4\x97\xdf\x8b\xd2\xee\x56\xce\x63\x0a\x7f\xcb\xc9\x44\x22\x21\xfd\xa2\xa9\xc4\xc2\xa5\xe4\xd6\x38\xe4\x46\x8b\x76\xbd\xf3\xe6\x91\x39\xb7\xdf\xa1\xeb\x39\x2a\xb6\x42\x01\x94\xaf\x9e\x5e\x51\x56\xea\x48\xfa\x32\x3e\x7f\xa4\xbe\x91\x16\x97\x51\xd4\xae\xcb\x85\xaf\xc3\x25\xbb\x93\x69\x9e\x42\x84\xd3\x50\xc5\x22\xf9\xbd\x99\xc9\x36\x4e\x12\xb8\x06\x67\x1a\xc6\x08\x2e\x65\x4a\x51\x78\xce\x98\x0e\xd1\xb6\xc9\xf8\x70\x19\x45\x21\xb2\x16\xcc\x4a\x93\x93\x53\x32\x57\x14\x9a\x12\xe9\xd9\xca\x63\x1d\x62\xea\x5c\xc2\x19\x9f\xed\x93\x4e\xba\xd0\x54\x28\xcc\x38\xc4\xbc\xa0\x54\x11\xe0\x38\xf9\x1d\x0b\xb6\x4e\x2a\x5a\x4c\x09\xcb\xcc\xb8\xe6\xf9\x7c\x29\xe9\xa1\xb7\x72\x3a\x45\x0b\x62\x73\xa2\x0f\xa8\x4d\x81\x9d\x3a\xf7\x1f\x9c\xce\x17\xcd\xf8\xbc\x23\xda\x37\x3c\xb0\x44\xe2\x60\x8c\x7e\x89\xa8\x29\xf7\xf6\xf4\x9d\x0f\xe9\x8c\x3e\xe7\x9a\x35\xc0\xf4\x79\xe0\x2a\x94\x25\xe8\x14\x08\xf9\x8d\xcc\x70\xc3\x91\x37\x88\xca\x63\x77\xed\x14\xf6\xe6\xcd\xef\xbf\xd5\xa0\x66\xa4\xa7\x6f\x71\xad\xae\x33\x8a\xba\x21\x45\xdc\x58\x1c\x1b\x62\x9f\xd5\xe9\xa4\xcc\xce\x89\xa2\xf4\x07\x9f\x86\xe7\x94\xb5\x1d\x59\x70\xac\x4c\x3b\x53\x1d\x02\x93\x0b\x8a\xee\x03\xe9\xb3\x71\x7e\x0f\x40\xae\x42\xa4\x8c\xf3\x84\x27\xf4\x2c\x54\x98\xc2\xe1\xc3\x0c\x73\x2b\x9d\x97\xfc\x67\xa0\x23\x1d\xf6\xc1\x56\x26\xda\xc7\xc0\xdb\x74\x09\x1e\x9b\xe5\xf8\x10\x50\x4a\x79\xfb\xa0\xf9\x58\xf8\x69\x27\x8d\xab\x98\x42\x68\x35\xb4\x59\x7e\xf8\xf0\xe1\x03\xc0\x2d\x65\xb6\x89\x44\x25\x80\x9a\x52\xc5\x56\x0e\xa4\xff\xb0\x39\x7b\xe6\xfc\x39\xf3\x2c\x42\xdd\xf6\x01\xca\xf6\xe0\xa4\xe6\x08\x8a\x28\x6d\x20\xa8\x95\x7b\x2f\x99\x0b\x2c\xf5\xa1\x5a\xb0\x6f\x11\x50\x4e\x0b\xea\x48\x76\x7a\x2a\x73\xbe\xcf\xe7\x7b\x29\x4b\xe5\xaa\xd2\x11\x8e\xae\x8c\x07\x99\x66\x2a\x94\x73\x14\xc7\x0d\xad\x6f\xa8\xaf\xd1\xc1\xfe\xd5\xac\x03\xc6\xb9\x0f\x54\x09\x95\xc3\xe5\x0c\x6d\xd0\x8e\x4e\x7c\x1e\xb4\xde\x02\xaa\x69\xd8\x11\xf2\xc5\xe3\x0d\x5b\xf2\xc3\xa6\xfb\xfd\x98\x71\x2d\x5f\xac\x8d\xfb\x63\x89\xbc\xb4\xfb\x5e\x58\x2a\xbb\x3f\x25\x04\x2a\x45\xde\x79\x96\x66\xbb\x3c\xe4\xe6\x32\xfe\xb2\xb5\x80\x5e\xdc\x40\x5c\xa7\x5d\x24\xb4\x8c\x63\xe9\x20\x63\x7e\xd6\xae\x86\x8d\xd8\x7d\xf9\xf2\xdd\xcb\x93\xf0\xe9\xf5\xdb\x57\xe5\xa7\xb7\xaf\x5e\xb4\x9b\xf7\xd4\xe7\x09\x37\x66\x2e\x5b\xf3\x92\x1d\xb6\x1e\xf1\x45\xe4\xe2\x99\x45\x37\xdb\xca\x6b\xca\xee\x62\xa0\x58\x9a\xb5\x86\x22\x65\x67\xb1\x4e\x49\x64\x68\xb6\x30\x52\x00\x53\xd4\x7d\x84\xec\x85\x77\x81\xff\x2f\xb0\x3a\x27\x18\xe7\x93\x09\xda\x1d\x7c\xc0\x39\x1f\x34\xdb\xcd\x79\xe3\x76\xca\x4d\x0d\xb5\xe7\x02\x46\x26\xd7\x02\x62\x2b\xb3\xc2\x79\x8e\x46\x71\xdc\x0c\xc8\x78\x86\xf0\x99\x36\xde\x44\x6d\x41\xd7\x85\x0c\x6a\x6e\x68\x0f\xb5\x3a\x82\x59\xb1\xd5\x89\x9a\xd9\xf7\xd5\xbb\xb7\xf5\x32\x69\xbd\x4f\x72\xb7\x07\xa0\xaf\xcc\xb6\x79\x7c\x1c\x07\x1e\xc8\x34\x6f\x12\xcb\x9f\x86\x20\x15\xb8\xd8\x03\x41\xa4\xc5\x56\xbf\x8a\x94\x59\x42\xe4\x99\xf5\x50\xac\x30\xaa\x19\xb7\x5f\x99\xca\xb1\x1a\x30\xaa\x7a\x1b\x4a\x1d\xd9\x8e\xb1\xe5\xce\xb0\xfa\xed\xed\x9b\x97\x8d\x0e\x7c\x5f\x57\x8b\xb4\x18\x2c\x75\x9b\x91\x0d\x36\xfa\x14\xe1\xf2\xdf\x06\xc4\x97\x7a\x67\xaf\xd8\x17\x9d\x1d\x40\x5f\x2c\xd0\x7a\xe9\x8a\xee\x63\x7b\x88\x32\xb1\xa8\x18\xfb\x83\x9c\xc8\x58\x81\x56\xea\xe9\xee\x56\xc3\xae\xd7\x82\x90\xe4\xa8\xc1\xcf\xdb\x14\x67\x43\x66\xd6\xeb\x77\x37\x3b\x5d\x59\x62\x9d\xbf\x22\x29\x30\xc4\x17\x9d\x41\x5a\xdc\x28\xec\xae\x12\x14\xcd\xe8\x7c\x6f\xcf\xa8\xe6\x8b\x28\x63\xbc\x3d\xbe\x09\xdf\x86\x61\x67\xb0\x42\xc5\xf5\xaa\x5c\xf9\x2d\xc7\xbc\x15\xef\xab\x4c\xf2\x70\x8f\x91\x67\x22\x34\x8a\xe3\xd5\x66\xce\xe3\x08\x0d\xcb\xbd\x39\xf5\xb9\x96\x7a\xba\xfd\x0c\x5d\x10\x2d\x35\xc1\xf9\x96\xac\xff\x7a\x08\x46\x6c\x3c\x53\xdb\x98\x6e\xf8\x11\x74\xbb\xe5\x22\xa7\x66\x92\x94\xb9\x4f\x79\x03\x1b\x79\x06\x10\x5d\x5e\xf8\x55\x86\x14\x49\x61\x36\xfc\xeb\xab\xfa\xa5\x00\xed\x5a\x0d\xd4\x77\x16\x65\xc6\xa5\x9e\x8e\xba\x6e\x4c\xaa\x8a\x56\x2c\x01\x5a\x73\x52\xbb\x12\xaa\x99\xb2\x1d\x8e\x0d\x1b\x42\x46\x76\x0e\x5e\x51\x37\xe7\x3c\xc9\xc2\xde\x89\xed\xb8\xbb\x68\xd4\xde\x4b\x76\xf7\x80\xae\x11\x7a\xcf\xc6\x0a\xa1\xd8\xb0\x98\x4f\xf1\x8e\x1a\x1c\xa1\x87\xa5\xf4\x33\x70\x9b\x4b\x34\xe8\xf5\xa2\xeb\xe4\xb2\xff\xaf\xe4\xa6\x3f\xb8\xb8\xfa\x23\x19\xf5\xe3\x61\xaf\x07\xc7\xfb\xa2\x48\xd9\xdd\x23\x90\x84\xbd\xfa\x9d\xad\x2a\x15\xa6\x8d\x3b\x04\xea\x39\x0e\x92\xc9\xcb\x97\x33\xc9\x67\xc0\xf3\x34\x57\x2c\x5c\x6b\x6c\x26\xd4\x55\xa8\x43\x71\xa5\x31\xa6\x76\xbd\x46\xf2\x9a\xee\xf2\xe6\xf5\x76\x1f\x0f\xf2\x92\xd0\xa0\xee\xf2\x9d\xf0\x68\x99\x14\x7e\x08\xcb\x13\x29\x5b\x3d\xbc\xb3\x1c\xe1\xd4\x5d\xe7\x1d\xed\xc9\x3d\x4d\xd7\x41\xb8\xbd\xd5\xbc\x28\x84\xb8\x02\x15\xd3\x02\xb2\xdc\x62\x35\xb3\xe9\x0c\xce\xed\x69\xd9\xe1\x74\xbf\xe9\x06\x4e\xdd\x85\xde\x57\xf9\x2d\x14\xff\xe9\x35\x0f\x5a\x3f\xa8\xf8\x95\xf1\xd4\xc0\x85\xb3\x7b\x60\xde\x54\x38\x47\x48\xdf\xa2\x6a\xe7\x1c\x6a\x51\xb2\xdf\xda\x8d\x1d\x75\x7e\xc1\x6b\xca\x1e\x77\x8b\x73\x78\x9e\xc9\x44\x17\xc2\x93\xb0\xfb\xd1\x71\xf3\x4e\xb5\xc7\x37\x09\x46\xea\xae\xa2\x77\x29\x75\x28\xbb\xa3\x38\x6e\xde\x13\x13\x49\x64\x1a\x8c\x12\x68\x4f\x20\xb3\x78\x7a\x76\x36\xea\x22\x22\x5b\x8a\xa2\xe7\x59\x92\x4a\x4d\x85\xf1\xe1\x8b\xdb\x62\x0a\xd0\x79\xfc\x17\x3a\xcb\x7d\xad\x70\x30\x6b\x57\x81\x11\xd0\xf9\x1e\x29\xd4\xff\x78\x71\xfc\xf8\x93\xa5\xa7\x93\x8e\xe3\xdd\xae\x5a\x67\x5c\xd5\x0a\xd7\xe1\x34\xec\xb8\x84\x6d\xa8\x88\x8a\xea\xfc\xaa\xb3\x70\x5c\x57\x6c\xaa\xa2\x57\xd5\xea\x50\xef\xf6\x2a\x00\x74\x8c\xdc\xa4\x59\xee\x31\x11\xe5\xd3\xa1\x0e\x3c\xe8\x6e\x67\xb9\x5b\x51\x8b\xd5\xdd\xb4\x87\x12\x65\x72\x1f\xfa\x0f\xb2\xd6\x51\xae\xeb\x17\x92\xc7\x15\x13\xb8\x47\x73\xc2\x93\xb3\x72\x54\x9b\x6b\x56\xcc\x48\xbe\xe5\x4c\x85\xe9\xbf\x16\x3d\x8d\x77\x7e\x47\x8e\x7d\xc0\x59\xa7\xe8\x13\xa9\x27\x26\xe1\x33\x6b\xb4\x09\xef\x1c\x3c\x1c\x54\xa3\x5b\x2d\xb6\x5d\x2c\x15\xd3\x89\x8c\x42\x7c\xc9\xe4\x7a\x70\xb7\xe6\x65\xcb\xaa\x35\xf8\x69\xda\x46\x5a\x9c\xe5\x93\x47\xea\x5b\x5e\x85\x96\x59\x2a\x90\xc2\xae\x8b\x42\xa3\xd5\xaa\x72\x52\x17\x92\x9b\x5f\x1f\x57\x3c\xb8\x81\x7b\x2f\x58\x14\xaf\x8f\xd8\xd0\x7f\xae\x59\x2e\x9d\xf8\x49\x18\x7d\xd1\xd3\xf5\x7b\xb2\x19\x73\x65\x42\xf4\x26\xcb\x88\x93\x21\x67\xb9\xc3\xb0\x0d\x2d\x2e\x95\x93\x0e\x26\xb9\x52\x21\xef\x73\xa6\xcb\x44\x0a\x53\x6b\x96\xba\xc0\x62\x52\x2c\x2f\x4d\x7a\x3f\xd3\xf0\x65\xd0\x75\x18\xfd\xbc\x36\x7e\x73\x20\xaa\x75\xe1\xca\x64\xc3\xfa\x6d\x69\xd9\xfb\x84\xb9\x35\xec\xa6\xb2\x98\x19\xbb\x6e\x00\x7c\x6e\x03\xc7\xa6\xf2\x77\xb2\xbe\x0a\x1e\x0e\xae\x7e\x20\x1f\xad\x35\xdb\x51\x0d\xd7\x50\x07\xc3\xf6\x5b\x20\x83\x61\x35\xe9\x16\xff\x6b\xb8\x93\xdd\xbd\x50\xc8\xa1\x9d\x03\xe2\x1b\xb6\x52\x86\x89\x92\x03\x14\x63\x61\xbc\x2b\x63\x65\x86\x4c\xa0\x75\x27\x9b\xe8\x69\xbe\x8e\xf4\x43\xac\x31\x90\x87\x06\x95\xed\x6e\xd3\x8a\xdc\xff\xd0\xdd\xc3\x25\x5b\xc7\x76\xa5\x6e\x79\xeb\xbf\x2c\x4e\x92\xaa\x9e\x44\x51\xe4\x75\xd6\x00\x00\x47\xe5\xa0\x53\xc3\x44\x99\xa5\x3b\xde\x15\x7b\xdb\x68\x70\xd8\x74\xe3\x69\x11\xe3\xf3\xf3\x3c\x6b\x03\x3a\xcf\x8b\xdc\x81\x75\xbe\xb8\x71\x90\xf3\xa8\x3f\xf8\xd4\xbe\x8b\xbd\xb7\x26\x64\x8a\xeb\x68\x7f\x87\x69\x0c\x61\x5e\xbd\x7d\x5b\x7f\xaf\x43\x38\xc6\xe7\x89\xc8\x33\x77\x7f\x14\x12\x21\xb6\x39\x4f\xd5\x72\x04\xff\x2d\x78\xe1\x12\x2d\x52\xbd\x24\x22\x19\xa6\x1c\x0d\xf5\x87\xe5\xa0\xc2\xd5\xa7\x20\x46\x97\xb1\x44\xf1\x50\xcd\x98\x1f\xe9\xff\x61\xbb\xc4\x21\xea\xcd\xcb\x51\xb9\xbf\x9e\x5c\x93\x90\xed\x9a\x9b\xdc\x9f\x9a\xc9\x69\x50\x65\x7d\x08\x4d\x93\x5f\xc7\x70\x71\x55\xbc\x9b\xb9\xc2\xae\xb2\xbd\x4b\x37\xbe\x48\x8c\x31\x59\xe3\x52\xa1\xbb\xb9\xa0\x22\x56\x0c\xe3\xda\xd1\x89\x68\xff\xcf\x01\xdb\x4c\xba\xaa\x61\x4b\xf5\x32\xe3\xc4\x13\x0c\xce\x54\x31\x3e\x79\x18\xc5\xb6\xe1\x8a\x16\xc9\x03\x63\xb8\x4b\x4c\xbb\xde\x8c\xbd\x2f\xed\x61\x1b\xdd\xf3\xc2\x8d\xe4\x6a\xeb\xde\x28\xc5\xf4\x90\xfb\xdf\x1e\x78\xff\x8f\x07\xde\x3f\x3e\xd0\xfe\x91\xe1\x73\xf4\x97\x07\xde\x3c\x1c\x6f\x5f\x29\xc3\x0f\x2c\x86\x2f\xc6\x79\xeb\x0d\xcf\xa7\x95\x71\xfb\x73\xa0\x44\x5a\x1c\x1c\xca\xc7\xa5\xf8\x09\x48\xc8\x60\x7f\x86\xd1\xc2\x61\xe5\x5c\x67\xfe\xd0\x41\x12\xde\x21\x56\xa6\x75\x41\xf0\xb4\x42\xce\xad\x69\x13\x87\xa7\x10\xf1\x15\xa7\xcc\x1d\x2a\x93\xaf\x37\xef\x0d\x35\x1b\xab\xc3\x9c\xf6\x46\xc8\x28\x8e\xc3\x63\x07\x97\x72\x58\x01\xdd\x93\xaf\xa7\x90\x71\x3e\xd8\xf2\x0f\x2d\x4f\xba\xf9\x21\x0f\x7b\x23\x64\x30\xec\xfc\xc7\x92\xa7\x15\xd2\x57\xd9\x8c\x1d\x58\xc4\xd9\x90\xb7\x38\xf5\x53\x8b\x88\xcd\x41\x82\xe2\xec\x6c\x74\x28\x6f\x2a\xb7\xee\x9d\xdd\x1e\x72\xf7\xc3\x85\x5a\x25\xa1\xb8\x24\xfb\x83\xc9\x83\x9c\x71\x25\x65\xb0\xd4\xe2\x50\x32\x9e\xfd\x3b\x00\x00\xff\xff\x77\x7c\xdc\x14\x05\x37\x00\x00")

func tcprowYamlBytes() ([]byte, error) {
	return bindataRead(
		_tcprowYaml,
		"TCPRow.yaml",
	)
}

func tcprowYaml() (*asset, error) {
	bytes, err := tcprowYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TCPRow.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toplevelYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x4d\x6a\xc3\x40\x0c\x05\xe0\xbd\x4f\xf1\x4e\xe0\x03\x64\xdb\xd2\x52\xe8\x1f\x6d\xda\x6d\x50\x6d\x39\x16\x19\x8f\x8c\xa4\x34\xd7\x2f\x33\x84\x60\x1a\x67\x67\x1e\x9e\xef\x89\xf7\x4e\xe6\xfc\x94\x07\xdd\x34\xc0\x3d\x7b\x67\x32\x87\x68\xde\xe0\x85\x83\x7a\x0a\x02\xfd\xe8\x31\x30\xea\x09\x31\x32\xe6\xf2\xc0\x30\x9b\x76\xec\xce\x7d\x0d\x27\x26\x3f\x1a\x4f\x9c\xa3\x6d\x2e\x64\xbb\x25\x3f\x3c\x48\xe2\x57\x9a\xf8\xca\x7f\xbc\xfb\xc4\xd7\xc7\x33\x42\x2b\x41\xd6\x8d\xf2\xcb\xe8\x34\x07\x49\x96\xbc\xaf\x71\xb0\xc7\x4e\x7a\x0c\x6a\x88\x51\x1c\xa6\xa7\x65\x45\xfd\xda\xca\x8a\x5f\x42\xc4\x48\x71\xeb\xec\x1b\x98\x7d\xb3\x79\x11\xfe\x83\xe7\x1c\x3a\x2c\xc5\xda\xb0\xc6\x9e\x2f\xbf\x62\xde\x4c\xf6\x92\x29\x61\x90\xc4\x99\x26\x2e\xe0\x62\x40\x90\xe3\x64\x12\xc1\xb9\x6c\xd3\x8b\x1f\x40\xb9\x87\xe4\x52\xdb\x00\xa8\xd3\x9d\xf7\x6a\x9b\xa4\xfb\x5d\xac\x0d\x70\x29\x5a\xe2\x9d\xa6\xc4\x5d\xf9\x01\xe5\x91\x07\x4d\x73\xdb\xfc\x05\x00\x00\xff\xff\xde\xad\xbd\x13\x06\x02\x00\x00")

func toplevelYamlBytes() ([]byte, error) {
	return bindataRead(
		_toplevelYaml,
		"toplevel.yaml",
	)
}

func toplevelYaml() (*asset, error) {
	bytes, err := toplevelYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "toplevel.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NDTResultRow.yaml": ndtresultrowYaml,
	"PTTest.yaml":       pttestYaml,
	"README.md":         readmeMd,
	"TCPRow.yaml":       tcprowYaml,
	"toplevel.yaml":     toplevelYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NDTResultRow.yaml": &bintree{ndtresultrowYaml, map[string]*bintree{}},
	"PTTest.yaml":       &bintree{pttestYaml, map[string]*bintree{}},
	"README.md":         &bintree{readmeMd, map[string]*bintree{}},
	"TCPRow.yaml":       &bintree{tcprowYaml, map[string]*bintree{}},
	"toplevel.yaml":     &bintree{toplevelYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
