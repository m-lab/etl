// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schema generated by go-bindata.// sources:
// descriptions/NDTResultRow.yaml
// descriptions/PTTest.yaml
// descriptions/README.md
// descriptions/TCPRow.yaml
// descriptions/toplevel.yaml
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ndtresultrowYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4b\x6b\xe3\x3c\x14\xdd\xe7\x57\x1c\xba\xea\x07\xa9\x3f\x08\xcc\xa6\xbb\xe2\xc0\xd0\xa1\xc9\x84\xd8\x49\xd7\x8a\x74\x13\x0b\xf4\x30\x7a\xb8\xf4\xdf\x0f\x92\xed\xc9\x24\x6e\xda\x45\xb7\xf7\x5a\xe7\x71\xcf\xc1\x3f\x65\xa8\x1a\xeb\x42\x69\xb5\x96\xe1\x71\x06\x2c\xc9\x73\x27\xdb\x20\xad\x79\xc4\xe5\x1a\xd2\x23\x34\x94\xa6\xe0\xfd\xe4\xde\xa7\x35\x8e\xd6\xe9\xff\x60\x8f\x79\xed\xa2\x31\xd2\x9c\x66\x00\xe0\xc9\x75\xe4\xc0\xad\xa0\x62\xb6\x27\xe7\x13\xec\x35\xcb\x30\x1f\xe1\xfd\xbb\x3e\x58\x25\x39\xba\x61\x7e\x2f\x8f\x60\xe6\xfd\x9a\x60\x00\xcf\x3c\x3d\xc1\xac\xb4\x26\x38\xab\x26\x0c\x2b\x0a\x4c\xb0\xc0\x92\x50\xd4\xe5\x06\xdc\x1a\x43\x3c\x2d\x3d\x82\xcd\xa8\xeb\x65\xfd\x23\xcd\x13\x00\x78\xc3\x8c\x21\x55\xe0\x49\xa9\x4c\x90\xb7\x9a\x98\x8f\x8e\x34\x99\xe0\xd1\xb0\x8e\xc0\x26\x2f\x46\x0d\xc5\x6e\xf7\xbc\x9c\x08\x49\xc3\x2c\xe2\xe6\xb3\x8d\xb3\xc1\xf2\x0f\x3c\x8c\x0b\x44\x4f\x22\x63\x54\x8b\x12\xcc\x08\x94\x8b\xea\x42\x5a\x81\x3d\x53\x91\x3c\xa4\xe1\x2a\x0a\xc2\x6b\x35\xcf\x26\x5e\xab\x6a\x9e\x5f\x6c\x5e\x9e\x9e\xd7\x67\xce\x15\x79\xcf\x4e\x74\x93\xfa\xd9\x08\xd9\x49\x11\x99\x82\xee\x3f\xf5\x60\x8e\xe0\xc9\x04\xbc\xc9\xd0\xe4\x03\x5e\xa1\x8c\x2a\x32\xf3\xa8\xe4\x57\xf5\x7b\x3d\x47\xfd\xb2\x3f\x93\x97\x4a\x92\x09\x63\x42\x13\xee\x7e\xfd\xe0\xa8\xb5\x2e\x90\x80\x1e\xa3\x64\x1e\x86\x69\xfa\xbf\x4b\x2c\x68\x99\x74\x3e\x35\x60\x51\x7d\x9e\xfe\x80\x17\xec\x43\xd5\x77\xf3\x22\xd4\x96\x5c\xea\x32\x09\x44\x9f\x2a\x16\x1a\x3a\xc7\xdf\x0e\xce\xe6\xa0\xe2\x54\xe0\x6e\xd7\x2a\xcb\xc4\x5d\x91\x48\xbf\x88\x3b\x45\x74\xd9\xbb\xfe\xd5\x8a\x98\xa9\x1b\x67\xe3\xa9\x69\x63\x58\x1d\x5a\x3f\xc1\x18\x64\x72\xa6\x78\x54\x2c\x9d\x80\x75\xe4\xd8\x89\x10\x33\x3f\x1c\x0b\xa9\xfb\xd5\xa2\xfc\xdc\x79\x0f\x94\x9c\xf7\x37\xf8\x86\xf3\xa5\x7d\x33\x83\xf7\x6a\x51\x7e\xe1\x3d\xd5\xf4\xda\x7b\x7a\xf5\x2d\xef\x62\x50\x30\xb8\xcf\x78\xd2\x6c\xeb\x7a\x82\x51\x37\x04\x2d\x8d\xd4\x51\x63\x5b\xd7\xb0\x87\xfc\xdf\x10\x10\xd1\x0d\x46\xcf\x68\xff\x9c\xa4\x07\xed\x4f\xb5\x1d\xda\xf7\xa1\xc8\x44\xc0\xfb\x8b\xfe\x6d\xe9\x0d\x99\x7f\x02\x00\x00\xff\xff\x64\xad\xf8\x58\x6f\x05\x00\x00")

func ndtresultrowYamlBytes() ([]byte, error) {
	return bindataRead(
		_ndtresultrowYaml,
		"NDTResultRow.yaml",
	)
}

func ndtresultrowYaml() (*asset, error) {
	bytes, err := ndtresultrowYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NDTResultRow.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pttestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func pttestYamlBytes() ([]byte, error) {
	return bindataRead(
		_pttestYaml,
		"PTTest.yaml",
	)
}

func pttestYaml() (*asset, error) {
	bytes, err := pttestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PTTest.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x4f\x8f\xdb\x46\x0c\xc5\xef\xfa\x14\x0f\xe8\x25\x09\x6c\x2d\xd0\x16\x3d\xf4\xb6\x49\x10\xc0\x68\x5c\xa0\xd9\x04\x68\x8f\xd4\x0c\x25\x11\x19\x0d\x15\x0e\x65\xaf\xbe\x7d\x31\x92\x9d\x3f\xc8\xc1\xc0\x78\x44\xfe\xc8\xf7\xc8\xf9\x05\xef\x84\x53\xc4\x5b\x2e\xc1\x64\x76\xd1\x5c\x9a\xe6\xe3\x28\x05\x51\x8c\x83\xab\xad\x08\x9a\x9d\x24\x17\xbc\x96\xe1\x9f\x85\x6d\xfd\x39\x09\xff\x3d\x9e\xdf\xa3\x97\xc4\x05\xbd\x1a\x4a\x18\x79\xa2\x26\x72\x2f\x59\x36\x2a\x24\x63\x10\x1f\x97\xae\x0d\x3a\x3d\x4c\xc7\x44\xdd\x03\x7b\x7a\xd8\x43\xdb\x5a\x95\xb7\x52\x9c\x1d\xda\xc3\x47\x2e\x7c\x43\x96\x51\x97\x14\xd1\x71\x85\x4f\xe4\xce\x11\x54\xd0\x7d\x79\x6e\x9f\xb6\xf4\xb7\x1a\x0a\x7a\xd3\xa9\xa6\x35\x3f\xd5\x19\xf4\xa1\xfb\xf2\x8c\x99\xc2\x67\x1a\xb8\x6d\x9a\xf3\x92\x5c\xe6\x74\xe7\x07\xca\x15\x4e\xf3\x9c\x84\x23\x5c\x2b\x06\x85\x26\xc6\x0f\xed\x7d\xe6\xb5\x80\x8c\x6b\xf1\x5e\x53\xd2\x6b\xf9\xb3\x79\xf5\x83\x11\x47\x3c\xd6\x76\xcd\x0f\x98\xb5\x14\xe9\xd2\x0a\xc9\x41\xa7\x39\xb1\xf3\x01\xf1\xbb\x58\xed\x41\xe8\xab\x97\x15\x22\x25\x2c\xa5\xec\x8c\x77\xc6\xbb\x56\xc4\x6f\xd7\x35\x3c\xaf\xfb\xaf\xcc\x1c\xee\x36\xed\x08\xf8\x48\xbe\x29\xc9\xea\x4d\xc7\x88\x1c\x97\xc0\x71\xb7\x45\x7d\x64\xdb\xfa\x6f\x9b\x57\xf8\x94\xc5\x0b\x8e\x38\xf5\xd0\x49\xaa\x9d\x87\x0a\x5a\x37\x6d\x7c\xa9\x13\x08\xba\x64\x2f\x78\x21\x2d\xb7\x60\x33\xb5\xdb\xd5\xcb\x0a\xf8\xc0\x3d\x1b\xe7\xc0\x38\xe2\xd3\x87\xf7\xd5\x31\x42\xd4\xb0\x4c\x35\x77\xd7\xd8\x49\x1e\x40\xb5\x23\xcd\x12\x28\xe1\xc2\xf6\x55\x47\x1a\xd4\xc4\xc7\xa9\xe1\xe7\x59\x0b\x47\x74\x2b\xbc\xae\x9d\xe4\xe2\xb6\x61\x5a\xe0\x2f\xb6\xcc\x09\x41\x23\x63\xe0\xcc\x46\x29\xad\x88\xca\xa5\x8a\xc4\x44\x1e\x46\xf0\x33\x05\x4f\x6b\x6d\xeb\x16\x7f\xbc\x1f\x2e\x64\x42\x5d\xe2\xc3\xcd\x22\x35\xf4\x4b\x0e\x9b\xf9\x2f\xb6\x3d\x65\xb2\x30\xd6\x46\x8b\x2e\x16\xb8\xbc\x04\xe5\xb8\x6d\x45\x73\x15\x1f\x31\x9b\x4c\x64\x2b\xbe\x6d\x72\xad\xf3\x74\x3e\xf9\x3a\x57\xf1\x4f\x6e\x4b\xf0\xc5\x38\xe2\x4c\x99\x06\xde\x0c\x38\xe5\x7d\x4f\x6b\x9d\x1a\x78\xc0\x75\x64\x63\xc8\x34\xab\x39\x65\x6f\x9b\x37\x8b\x19\x67\x4f\xeb\x57\x98\xe6\xb4\x22\x50\x4a\x05\xba\x38\xde\x54\xb7\xd9\x7e\xfb\x75\xeb\xe8\xf6\xef\x8f\xdf\x71\x1d\x25\x8c\x18\xe9\xc2\xd0\x0b\x5b\x9f\xf4\xda\x14\x9e\x28\xbb\x84\xb2\x7f\x6d\xea\x18\xa3\xf4\xdb\x8c\x7c\x5f\x80\xd7\x32\x60\x7f\xbc\x15\x47\x29\x61\x36\x1d\x8c\xa6\xa9\xaa\x4f\x94\x87\x85\x06\x2e\x2d\x70\xca\x77\xaf\x71\xa1\xb4\x70\x69\xb6\xcd\xa2\x79\x66\xb2\x3a\xe9\x8e\x91\x79\x20\x97\x4b\x3d\xec\xef\xa5\x63\x74\x42\xb7\x41\x52\xae\xd1\xa6\xb3\x09\x39\xe3\xfc\xf8\xef\xe9\xef\x8f\x6d\xf3\x7f\x00\x00\x00\xff\xff\x74\x8f\xba\x6f\x6d\x04\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tcprowYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x4b\x73\xdb\xb8\xb2\xde\xe7\x57\x74\xcd\xe6\xda\x55\xb6\xf2\x98\x4c\x26\xc9\xad\xba\x29\x59\x56\xe6\xba\x12\x3f\x46\x64\xe2\x33\x2b\x16\x04\xb4\x24\x8c\x40\x80\x01\x40\xc9\xca\xaf\x3f\xd5\x20\x29\xd1\x24\x65\xc9\x19\x2b\xa7\xce\x4e\x96\x40\x74\x7f\x8d\x7e\x7c\xdd\xa0\xe3\xc1\xcd\x85\x9e\x98\xf7\xcf\x00\xce\xd1\x71\x2b\x33\x2f\x8d\x7e\x0f\x23\x74\xb9\xf2\x0e\x26\xd6\xa4\x30\x45\xef\x0c\x9f\x9b\xcc\x1f\xf5\x7a\xf1\xe0\x26\xb9\xb8\xfa\x78\xdd\xeb\x1d\x3f\x2b\x9f\xee\x45\x9e\x79\x6c\xed\x11\x0f\x6e\x20\xfc\x42\x3f\x48\xc7\x73\xe7\xc2\xf7\x17\x1a\x2e\x3f\xb3\x31\x08\xe6\x59\x58\xe4\x68\x11\x48\x07\xda\xa4\x52\x33\xa5\x56\xf0\x12\x8e\x86\xce\xb3\xb1\x92\x6e\x86\xe2\xb8\xf7\x0c\x00\xe0\xda\xcf\xd0\xc2\x82\xa9\x1c\x1d\x58\x9c\x28\xe4\x1e\xbc\x65\xda\x49\xd4\xbe\xd8\xc6\xc1\x8c\x2d\xa4\x9e\x82\xd4\xdc\xa4\x99\x42\x8f\x60\xcd\xd2\xd1\x0e\x23\x9c\xa0\x45\xcd\xf1\x3d\x8c\x3e\x0e\xe0\xf7\x77\x2f\x9f\x01\x7c\x42\xab\x51\xbd\x87\x08\x91\x94\x49\x86\x51\xdc\x3f\xfb\x7c\x11\xfd\xff\xf0\x1c\xa4\xa6\x6d\x54\x2e\xf0\xb9\x46\xff\xdc\xf3\x2c\x29\x84\xf4\x66\x6b\xec\x83\x7e\x37\xfa\xcf\xc6\x91\x92\xdc\x2c\xd0\xae\x4a\x88\x29\xe3\x33\xa9\x9b\xf6\xf8\x68\x2c\xa1\x10\x92\x1e\x64\x0a\x14\x3d\x39\x66\x0e\x05\x70\xa3\xa7\xe8\xe8\x7b\xfa\xe8\xad\x51\xc0\xd4\xd4\x58\xe9\x67\xa9\x3b\x81\x52\x36\x48\x17\xec\xc3\x94\x33\x90\xd3\x73\xde\xac\xd7\x2f\xa5\x16\x66\x09\x4c\xfc\x9d\x3b\x9f\xa2\xf6\x4d\x53\xc0\xc0\xa4\xe1\x7b\x82\x4b\x30\x65\xb6\x78\x1d\xb0\x4a\x9d\xe5\xbe\xc7\x6b\x46\x0a\x16\x40\x9f\x70\x96\x94\x87\xd6\xb2\x50\xcd\x34\x23\x0c\x87\x93\x4a\xef\x5a\xe6\xb9\xca\xd3\x31\x5a\x30\x13\xf0\x32\x45\x93\x7b\x07\x47\xa3\xf8\xba\xc4\x6d\xab\x27\x83\x89\xdc\x31\x30\x0f\x7e\x26\x1d\x38\xfc\x96\x93\xda\xbd\x86\x0d\x47\xe8\xd0\x13\xec\xef\x68\x0d\x18\x0d\x13\x63\x97\xcc\x0a\xc8\xac\x99\x5a\x74\xae\x06\x42\x72\x37\x4f\xec\x46\xb7\x26\x08\xa9\x09\xa1\xd1\x1a\x39\xe9\x9a\x90\xef\xd7\x50\xdd\x58\x33\xc6\x36\xa0\x81\xd1\x0e\x79\xee\xe5\x02\x0b\x25\x4a\xc3\x67\x61\x39\xf8\x19\xf3\xe4\x9a\x08\x53\xa3\x11\x72\xcd\xb4\x5b\xa2\x45\xb1\xcb\x2f\x83\xb6\xc5\x26\x89\xc9\xfd\x23\x95\x3d\x63\x7c\x6e\x26\x93\x96\xb6\xc3\xbb\xcc\x68\xd4\x5e\x32\x55\x1d\x00\x8c\x8b\xb5\xc0\x4d\xae\x3d\xda\x56\xd4\x72\x8b\xe4\x27\x64\xdd\x51\x7c\x7d\x02\x36\xd8\xdc\x68\x70\x39\xe7\xe8\xdc\x24\x57\x30\x8a\x63\x48\x91\xb9\xbc\x58\x1b\x7c\xed\x1e\x92\x4a\xc8\xe3\x60\x5c\x07\xb5\xdb\x46\x3f\x93\x1e\x50\x73\x23\x50\x40\xf4\xd7\x15\x98\x62\x1d\x30\x2d\xc0\x84\x6c\xa1\x71\x6a\xbc\x64\xe1\xeb\x06\xa2\x5f\x42\xd0\xc4\x17\x97\x14\xf2\x97\x37\x11\xbc\xb8\x7b\xf9\xbf\xe1\xbb\xa8\x3f\xf8\x04\x2f\xee\x5e\x15\x7f\xdd\x46\x83\xfe\xe7\x21\xbc\xb8\x7b\x5d\xfc\x3d\x1c\x5c\xc1\x8b\xbb\xb7\x70\x0a\xb7\xcc\xad\x05\xa0\x58\xff\x9a\x44\xc3\xe1\x15\x9c\x42\xdf\x83\x42\xe6\xc8\x46\x08\xc3\x41\x0c\x0e\x51\x97\x12\xfe\xba\x4a\xce\xfb\x71\x1f\x4e\xe9\xe3\x29\xc9\x63\x7c\xae\xcd\x52\xa1\x98\xa2\x28\x72\xa3\xd4\x01\x94\x0b\x46\xb7\x60\xf9\x42\xfc\x52\xb3\x27\x19\x27\xb9\xbe\x89\x93\x1a\x84\x9a\x59\x73\x96\xc9\xe7\x4a\xea\xfc\xae\x11\x96\xb7\x11\x67\xaa\x9d\xb0\xce\xbe\xfc\x41\x4e\x3c\x51\xc1\x58\x14\x99\x91\x16\xc5\xda\x60\xcf\x11\x5f\x14\x7f\x35\xcc\x48\x89\x73\x2a\xfd\x2c\x1f\xf7\xb8\x49\x9f\xa7\xa7\x8a\x8d\x9f\xa3\x57\xcf\xa5\x73\x39\xba\xe7\xbf\xbf\x7b\xb1\x29\x14\xd5\x8e\x2d\xe9\xb7\x45\xb4\xb8\x20\x2e\xe4\xb0\xf1\x0a\xfc\x0c\x41\x19\xce\x14\xd9\x40\xa0\xa5\x00\x17\x48\xc7\x0d\x0e\xa7\xbd\xa5\x16\xc1\x98\x5f\xa5\x93\x63\xd2\xd2\x41\xb1\xfb\x09\x64\xa8\x05\x55\x81\x5d\x8a\xb5\x83\xef\xd7\x57\xbf\xd6\x6c\xec\xb4\x48\x96\x85\x52\x35\xd3\x76\x59\x75\x6d\x9e\xc7\x42\xb3\xc8\x51\x2e\x0a\x70\x85\x2f\xd7\xc0\xd5\x0d\x1d\x53\x02\x94\x0e\x04\x7a\xb4\xa9\xd4\x9b\x8d\x1c\x5a\xda\x80\x1b\x3d\x91\xd3\x93\x70\x5a\x1a\x99\x55\x2b\xfa\xca\x79\xa6\x3d\xe5\xc3\x50\x75\x83\xc1\x06\xb9\xb5\xa8\xbd\x5a\x81\x36\x1e\x58\x88\xde\x60\xc1\x7f\x6a\x2e\xcb\x17\x7b\x9a\xab\x9f\x65\x9f\x65\x2a\x3d\x8a\x96\xbd\x3e\x2a\x46\xe5\x5b\x48\xce\x3c\x9d\x61\x48\x9d\x36\xd4\xcf\x5a\x66\x59\x13\x00\x6d\xf4\xa9\x46\xbf\x34\x76\x0e\x63\xe3\xbd\x42\x8d\x7c\xde\x0c\xf6\x2b\xe3\xb1\xd8\x09\x17\xa8\xa1\x28\xca\x33\x63\x3d\xb0\x2c\x53\x41\x14\x65\x32\xcf\x94\xa2\x82\xb0\x60\x4a\x8a\xa2\x64\xdf\x25\x67\xb7\x5b\x73\x1a\xa9\x95\xb0\x2c\x4b\x54\x01\x66\xa7\x97\xc4\xd7\x1d\x5c\xab\x5e\xec\x20\x2e\xd2\x71\x43\xff\x3f\x73\xa6\xbd\xfc\x5e\xd4\x76\xb7\x72\x1e\x53\xf8\x5b\x4e\x26\x12\x09\xe9\x17\x4d\x35\x16\x2e\x25\xb7\xc6\x21\x37\x5a\xb4\x0b\x9e\x37\x8f\x4c\xba\xfd\x0e\x5d\xcf\x51\xb1\x15\x0a\xa0\x84\xf5\xf4\x8a\xb2\x52\x47\xd2\x97\xf1\xf9\x23\xf5\x8d\xb4\xb8\x8c\xa2\x76\x61\x2e\x9c\x1d\x2e\xd9\x9d\x4c\xf3\x14\x22\x9c\x86\x32\x16\xc9\xef\xcd\x54\xb6\x71\x92\x40\x36\x38\xd3\x30\x46\x70\x29\x53\x8a\xe2\x73\xc6\x74\x08\xb7\x4d\xca\x87\xcb\x28\x0a\xa1\xb5\x60\x56\x9a\x9c\x9c\x92\xb9\xa2\xd2\x94\x48\xcf\x56\x1e\xeb\x10\x53\xe7\x12\xce\xf8\x6c\x9f\x7c\xd2\x85\xa6\x42\x61\xc6\x21\xe8\x05\xe5\x8a\x00\xc7\xc9\xef\x58\xd0\x75\x52\xd1\x62\x4a\x58\x66\xc6\x35\xcf\xe7\x4b\xc9\x0f\xbd\x95\xd3\x29\x5a\x10\x9b\x13\x7d\x40\x6d\x0a\xec\xd4\xb9\x7f\x70\x3a\x5f\x34\xe3\xf3\x8e\x68\xdf\x10\xc1\x12\x89\x83\x31\xfa\x25\xa2\xa6\xe4\xdb\xd3\x77\x3e\xe4\x33\xfa\x9c\x6b\xd6\x00\xd3\xe7\x81\xac\x50\x96\xa0\x53\x20\xe4\x37\x32\xc3\x0d\x49\xde\x20\x2a\x8f\xdd\xb5\x73\xd8\x9b\x37\xbf\xff\x56\x83\x9a\x91\x9e\xbe\x45\xb6\xba\xce\x28\xea\x86\x14\x71\x63\x71\x6c\x88\x7e\x56\xa7\x93\x32\x3b\x27\x8e\xd2\x1f\x7c\x1a\x9e\x53\xda\x76\x64\xc1\xb1\x32\xed\x4c\x75\x08\x4c\x2e\x28\xba\x0f\xa4\xcf\xc6\xf9\x3d\x00\xb9\x0a\x91\x32\xce\x13\x9e\xd0\xb4\x50\x65\x0a\x87\x0f\x33\xcc\xad\x74\x5e\xf2\x9f\x81\x8e\x74\xd8\x07\x5b\x99\x68\x1f\x03\x6f\xd3\x26\x78\x6c\xd6\xe3\x43\x40\x29\xe5\xed\x83\xe6\x63\xe1\xa7\x9d\x3c\xae\xa2\x0a\xa1\xd7\xd0\x66\xf9\xe1\xc3\x87\x0f\x00\xb7\x94\xd9\x26\x12\x95\x00\xea\x4a\x15\x5b\x39\x90\xfe\xc3\xe6\xec\x99\xf3\xe7\xcc\xb3\x08\x75\xdb\x07\x28\xdb\x83\x93\x9a\x23\x28\xe2\xb4\x81\xa1\x56\xee\xbd\x64\x2e\xd0\xd4\x87\x6a\xc1\xbe\x45\x40\x39\x2d\xa8\x25\xd9\xe9\xa9\xcc\xf9\x3e\x9f\xef\xa5\x2c\x95\xab\x4a\x47\x38\xba\x32\x1e\x64\x9a\xa9\x50\xce\x51\x1c\x37\xb4\xbe\xa1\xc6\x46\x07\xfb\x57\xc3\x0e\x18\xe7\x3e\x70\x25\x54\x0e\x97\x33\xb4\x41\x3b\x3a\xf1\x79\xd0\x7a\x0b\xa8\xa6\x61\x47\xc8\x17\x8f\x37\x6c\x49\x10\x9b\xee\xf7\x63\xc6\xb5\x7c\xb1\x36\xee\x8f\x25\xf2\xd2\xee\x7b\x61\xa9\xec\xfe\x94\x10\xa8\x14\x79\xe7\x59\x9a\xed\xf2\x90\x9b\xcb\xf8\xcb\xd6\x02\x7a\x71\x03\x71\x9d\x76\x91\xd0\x32\x8e\xa5\x83\x8c\xf9\x59\xbb\x1a\x36\x62\xf7\xe5\xcb\x77\x2f\x4f\xc2\xa7\xd7\x6f\x5f\x95\x9f\xde\xbe\x7a\xd1\xee\xde\x53\x9f\x27\xdc\x98\xb9\x6c\x0d\x4c\x76\xd8\x7a\xc4\x17\x91\x8b\x67\x16\xdd\x6c\x2b\xaf\x29\xdb\x8b\x81\x62\x69\xd6\x9a\x8a\x94\xad\xc5\x3a\x25\x91\xa1\xd9\xc2\x48\x01\x4c\x51\xfb\x11\xb2\x17\xde\x85\x06\x60\x81\xd5\x39\xc1\x38\x9f\x4c\xd0\xee\xe0\x03\xce\xf9\xa0\xd9\x6e\xce\x1b\xb7\x53\x6e\x6a\xa8\x3f\x17\x30\x32\xb9\x16\x10\x5b\x99\x15\xce\x73\x34\x8a\xe3\x66\x40\xc6\x33\x84\xcf\xb4\xf1\x26\x6a\x0b\xba\x2e\x64\x50\x73\x43\x7b\xa8\xd7\x11\xcc\x8a\xad\x4e\xd4\xcc\xbe\xaf\xde\xbd\xad\x97\x49\xeb\x7d\x92\xbb\x3d\x00\x7d\x65\xb6\xcd\xe3\xe3\x38\xf0\x40\xa6\x79\x93\x58\xfe\x34\x04\xa9\xc0\xc5\x1e\x08\x22\x2d\xb6\xfa\x55\xa4\xcc\x12\x22\xcf\xac\x87\x62\x85\x51\xcd\xb8\xfd\xca\x54\x8e\xd5\x84\x51\xd5\xfb\x50\xea\xc8\x76\xcc\x2d\x77\x86\xd5\x6f\x6f\xdf\xbc\x6c\xb4\xe0\xfb\xba\x5a\xa4\xc5\x60\xa9\xdb\x8c\x6c\xb0\xd1\xa7\x08\x97\xff\x34\x20\xbe\xd4\x3b\x7b\xc5\xbe\xe8\xec\x00\xfa\x62\x81\xd6\x4b\x57\x74\x1f\xdb\x43\x94\x89\x45\xc5\xd8\x1f\xe4\x44\xc6\x0a\xb4\x52\x4f\x77\xb7\x1a\x76\xbd\x16\x84\x24\x47\x0d\x7e\xde\xa6\x38\x1b\x32\xb3\x5e\xbf\xbb\xd9\xe9\xca\x12\xeb\xfc\x15\x49\x81\x21\xbe\xe8\x0c\xd2\xe2\x4a\x61\x77\x95\xa0\x68\x46\xe7\x7b\x7b\x46\x35\x5f\x44\x19\xe3\xed\xf9\x4d\xf8\x36\x4c\x3b\x83\x15\x2a\xae\x57\xe5\xca\x6f\x39\xe6\xad\x78\x5f\x65\x92\x87\x8b\x8c\x3c\x13\xa1\x51\x1c\xaf\x36\x83\x1e\x47\x68\x58\xee\xcd\xa9\xcf\xb5\xd4\xd3\xed\x67\xe8\x82\x68\xa9\x09\xce\xb7\x64\xfd\xd7\x43\x30\x62\xe3\x99\xda\xc6\x74\xc3\x8f\xa0\xdb\x2d\x17\x39\x35\x93\xa4\xcc\x7d\xca\x1b\xd8\xc8\x33\x80\xe8\xf2\xc2\xaf\x32\xa4\x48\x0a\xc3\xe1\x5f\x5f\xd5\x6f\x05\x68\xd7\x6a\xa2\xbe\xb3\x28\x33\x2e\xf5\x74\xd4\x75\x65\x52\x55\xb4\x62\x09\xd0\x9a\x93\xda\x9d\x50\xcd\x94\xed\x70\x6c\xd8\x10\x32\xb2\x73\xf0\x8a\xba\x39\xe7\x49\x16\xf6\x4e\x6c\xc7\xe5\x45\xa3\xf6\x5e\xb2\xbb\x07\x74\x8d\xd0\x7b\x36\x56\x08\xc5\x86\xc5\x7c\x8a\x77\xd4\xe0\x08\x3d\x2c\xa5\x9f\x81\xdb\xdc\xa2\x41\xaf\x17\x5d\x27\x97\xfd\x7f\x25\x37\xfd\xc1\xc5\xd5\x1f\xc9\xa8\x1f\x0f\x7b\x3d\x38\xde\x17\x45\xca\xee\x1e\x81\x24\xec\xd5\xef\x6c\x55\xa9\x30\x6d\xdc\x21\x50\xcf\x71\x90\x4c\x5e\xbe\x9c\x49\x3e\x03\x9e\xa7\xb9\x62\xe1\x5e\x63\x33\xa2\xae\x42\x1d\x8a\x3b\x8d\x31\xb5\xeb\x35\x92\xd7\x74\x97\x37\xaf\xb7\xfb\x78\x90\x97\x84\x06\x75\x97\xef\x84\x47\xcb\xa4\xf0\x43\x58\x9e\x48\xd9\xea\xe1\x9d\xe5\x08\xa7\xee\x3a\xef\x68\x4f\xee\x69\xba\x0e\xc2\xed\xad\xe6\x45\x21\xc4\x15\xa8\x98\x16\x90\xe5\x16\xab\x99\x4d\x67\x70\x6e\x4f\xcb\x0e\xa7\xfb\x4d\x37\x70\xea\x2e\xf4\xbe\xca\x6f\xa1\xf8\x4f\xaf\x79\xd0\xfa\x41\xc5\xaf\x8c\xa7\x06\x2e\x9c\xdd\x03\xf3\xa6\xc2\x39\x42\xfa\x16\x55\x3b\xe7\x50\x8b\x92\xfd\xd6\xae\xec\xa8\xf3\x0b\x5e\x53\xf6\xb8\x5b\x9c\xc3\xf3\x4c\x26\xba\x10\x9e\x84\xdd\x8f\x8e\x9b\x97\xaa\x3d\xbe\x49\x30\x52\x77\x15\xbd\x4b\xa9\x43\xd9\x1d\xc5\x71\xf3\xa2\x98\x48\x22\xd3\x60\x94\x40\x7b\x02\x99\xc5\xd3\xb3\xb3\x51\x17\x11\xd9\x52\x14\x3d\xcf\x92\x54\x6a\x2a\x8c\x0f\xdf\xdc\x16\x53\x80\xce\xe3\xbf\xd0\x59\xee\x6b\x85\x83\x59\xbb\x0a\x8c\x80\xce\xf7\x48\xa1\xfe\xbf\x17\xc7\x8f\x3f\x59\x7a\x3a\xe9\x38\xde\xed\xaa\x75\xc6\x55\xad\x70\x1d\x4e\xc3\x8e\x5b\xd8\x86\x8a\xa8\xa8\xce\xaf\x3a\x0b\xc7\x75\xc5\xa6\x2a\x7a\x55\xad\x0e\xf5\x6e\xaf\x02\x40\xc7\xc8\x4d\x9a\xe5\x1e\x13\x51\x3e\x1d\xea\xc0\x83\xee\x76\x96\xbb\x15\xb5\x58\xdd\x4d\x7b\x28\x51\x26\xf7\xa1\xff\x20\x6b\x1d\xe5\xba\x7e\x23\x79\x5c\x31\x81\x7b\x34\x27\x3c\x39\x2b\x47\xb5\xb9\x66\xc5\x8c\xe4\x5b\xce\x54\x98\xfe\x6b\xd1\xd3\x78\xe7\x77\xe4\xd8\x07\x9c\x75\x8a\x3e\x91\x7a\x62\x12\x3e\xb3\x46\x9b\xf0\xd2\xc1\xc3\x41\x35\xba\xd5\x62\xdb\xc5\x52\x31\x9d\xc8\x28\xc4\x97\x4c\xae\x07\x77\x6b\x5e\xb6\xac\x5a\x83\x9f\xa6\x6d\xa4\xc5\x59\x3e\x79\xa4\xbe\xe5\x5d\x68\x99\xa5\x02\x29\xec\xba\x29\x34\x5a\xad\x2a\x27\x75\x21\xb9\xf9\xf5\x71\xc5\x83\x1b\xb8\xf7\x86\x45\xf1\xfe\x88\x0d\xfd\xe7\x9a\xe5\xd2\x89\x9f\x84\xd1\x17\x3d\x5d\xbf\x27\x9b\x31\x57\x26\x44\x6f\xb2\x8c\x38\x19\x72\x96\x3b\x0c\xdb\xd0\xe2\x52\x39\xe9\x60\x92\x2b\x15\xf2\x3e\x67\xba\x4c\xa4\x30\xb5\x66\xa9\x0b\x2c\x26\xc5\xf2\xd2\xa4\xf7\x33\x0d\x5f\x06\x5d\x87\xd1\xcf\x6b\xe3\x37\x07\xa2\x5a\x17\xae\x4c\x36\xac\xdf\x96\x96\xbd\x4f\x98\x5b\xc3\x6e\x2a\x8b\x99\xb1\xeb\x06\xc0\xe7\x36\x70\x6c\x2a\x7f\x27\xeb\xbb\xe0\xe1\xe0\xea\x07\xf2\xd1\x5a\xb3\x1d\xd5\x70\x0d\x75\x30\x6c\xbf\x06\x32\x18\x56\x93\x6e\xf1\xdf\x86\x3b\xd9\xdd\x0b\x85\x1c\xda\x39\x20\xbe\x61\x2b\x65\x98\x28\x39\x40\x31\x16\xc6\xbb\x32\x56\x66\xc8\x04\x5a\x77\xb2\x89\x9e\xe6\xfb\x48\x3f\xc4\x1a\x03\x79\x68\x50\xd9\xee\x36\xad\xc8\xfd\x0f\xdd\x3d\x5c\xb2\x75\x6c\x57\xea\x96\xd7\xfe\xcb\xe2\x24\xa9\xea\x49\x14\x45\x5e\x67\x0d\x00\x70\x54\x0e\x3a\x35\x4c\x94\x59\xba\xe3\x5d\xb1\xb7\x8d\x06\x87\x4d\x37\x9e\x16\x31\x3e\x3f\xcf\xb3\x36\xa0\xf3\xbc\xc8\x1d\x58\xe7\x8b\x1b\x07\x39\x8f\xfa\x83\x4f\xed\xbb\xd8\x7b\x6b\x42\xa6\xb8\x8e\xf6\x77\x98\xc6\x10\xe6\xd5\xdb\xb7\xf5\x37\x15\x84\x63\x7c\x9e\x88\x3c\x73\xf7\x47\x21\x11\x62\x9b\xf3\x54\x2d\x47\xf0\xdf\x82\x17\x2e\xd1\x22\xd5\x4b\x22\x92\x61\xca\xd1\x50\x7f\x58\x0e\x2a\x5c\x7d\x0a\x62\x74\x19\x4b\x14\x0f\xd5\x8c\xf9\x91\xfe\x1f\xb6\x4b\x1c\xa2\xde\xbc\x1d\x95\xfb\xeb\xc9\x35\x09\xd9\xae\xb9\xc9\xfd\xa9\x99\x9c\x06\x55\xd6\x87\xd0\x34\xf9\x75\x0c\x17\x57\xc5\xcb\x99\x2b\xec\x2a\xdb\xbb\x74\xe3\x8b\xc4\x18\x93\x35\x2e\x15\xba\x9b\x0b\x2a\x62\xc5\x30\xae\x1d\x9d\x88\xf6\x7f\x1c\xb0\xcd\xa4\xab\x1a\xb6\x54\x6f\x33\x4e\x3c\xc1\xe0\x4c\x15\xe3\x93\x87\x51\x6c\x1b\xae\x68\x91\x3c\x30\x86\xbb\xc4\xb4\xeb\xd5\xd8\xfb\xd2\x1e\xb6\xd1\x3d\x2f\xdc\x48\xae\xb6\xee\x8d\x52\x4c\x0f\xb9\xff\xed\x81\xf7\xff\x78\xe0\xfd\xe3\x03\xed\x1f\x19\x3e\x47\x7f\x79\xe0\xcd\xc3\xf1\xf6\x95\x32\xfc\xc0\x62\xf8\x62\x9c\xb7\x5e\xf1\x7c\x5a\x19\xb7\x3f\x07\x4a\xa4\xc5\xc1\xa1\x7c\x5c\x8a\x9f\x80\x84\x0c\xf6\x67\x18\x2d\x1c\x56\xce\x75\xe6\x0f\x1d\x24\xe1\x25\x62\x65\x5a\x17\x04\x4f\x2b\xe4\xdc\x9a\x36\x71\x78\x0a\x11\x5f\x71\xca\xdc\xa1\x32\xf9\x7a\xf3\xde\x50\xb3\xb1\x3a\xcc\x69\x6f\x84\x8c\xe2\x38\x3c\x76\x70\x29\x87\x15\xd0\x3d\xf9\x7a\x0a\x19\xe7\x83\x2d\xff\xd1\xf2\xa4\x9b\x1f\xf2\xb0\x37\x42\x06\xc3\xce\xff\x2c\x79\x5a\x21\x7d\x95\xcd\xd8\x81\x45\x9c\x0d\x79\x8b\x53\x3f\xb5\x88\xd8\x1c\x24\x28\xce\xce\x46\x87\xf2\xa6\x72\xeb\xde\xd9\xed\x21\x77\x3f\x5c\xa8\x55\x12\x8a\x4b\xb2\x3f\x98\x3c\xc8\x19\x57\x52\x06\x4b\x2d\x0e\x25\xe3\xd9\xbf\x03\x00\x00\xff\xff\xcb\x9e\xe2\x61\x06\x37\x00\x00")

func tcprowYamlBytes() ([]byte, error) {
	return bindataRead(
		_tcprowYaml,
		"TCPRow.yaml",
	)
}

func tcprowYaml() (*asset, error) {
	bytes, err := tcprowYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TCPRow.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toplevelYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x4d\x6a\xc3\x40\x0c\x05\xe0\xbd\x4f\xf1\x4e\xe0\x03\x64\xdb\xd2\x52\xe8\x1f\x6d\xda\x6d\x50\x6d\x39\x16\x19\x8f\x8c\xa4\x34\xd7\x2f\x33\x84\x60\x1a\x67\x67\x1e\x9e\xef\x89\xf7\x4e\xe6\xfc\x94\x07\xdd\x34\xc0\x3d\x7b\x67\x32\x87\x68\xde\xe0\x85\x83\x7a\x0a\x02\xfd\xe8\x31\x30\xea\x09\x31\x32\xe6\xf2\xc0\x30\x9b\x76\xec\xce\x7d\x0d\x27\x26\x3f\x1a\x4f\x9c\xa3\x6d\x2e\x64\xbb\x25\x3f\x3c\x48\xe2\x57\x9a\xf8\xca\x7f\xbc\xfb\xc4\xd7\xc7\x33\x42\x2b\x41\xd6\x8d\xf2\xcb\xe8\x34\x07\x49\x96\xbc\xaf\x71\xb0\xc7\x4e\x7a\x0c\x6a\x88\x51\x1c\xa6\xa7\x65\x45\xfd\xda\xca\x8a\x5f\x42\xc4\x48\x71\xeb\xec\x1b\x98\x7d\xb3\x79\x11\xfe\x83\xe7\x1c\x3a\x2c\xc5\xda\xb0\xc6\x9e\x2f\xbf\x62\xde\x4c\xf6\x92\x29\x61\x90\xc4\x99\x26\x2e\xe0\x62\x40\x90\xe3\x64\x12\xc1\xb9\x6c\xd3\x8b\x1f\x40\xb9\x87\xe4\x52\xdb\x00\xa8\xd3\x9d\xf7\x6a\x9b\xa4\xfb\x5d\xac\x0d\x70\x29\x5a\xe2\x9d\xa6\xc4\x5d\xf9\x01\xe5\x91\x07\x4d\x73\xdb\xfc\x05\x00\x00\xff\xff\xde\xad\xbd\x13\x06\x02\x00\x00")

func toplevelYamlBytes() ([]byte, error) {
	return bindataRead(
		_toplevelYaml,
		"toplevel.yaml",
	)
}

func toplevelYaml() (*asset, error) {
	bytes, err := toplevelYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "toplevel.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"NDTResultRow.yaml": ndtresultrowYaml,
	"PTTest.yaml":       pttestYaml,
	"README.md":         readmeMd,
	"TCPRow.yaml":       tcprowYaml,
	"toplevel.yaml":     toplevelYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"NDTResultRow.yaml": &bintree{ndtresultrowYaml, map[string]*bintree{}},
	"PTTest.yaml":       &bintree{pttestYaml, map[string]*bintree{}},
	"README.md":         &bintree{readmeMd, map[string]*bintree{}},
	"TCPRow.yaml":       &bintree{tcprowYaml, map[string]*bintree{}},
	"toplevel.yaml":     &bintree{toplevelYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
