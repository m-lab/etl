# Travis configuration for etl-worker.
#
# etl-worker is a Go project supporting release automation to mlab-sandbox
# for a single branch in the m-lab/etl repository. The steps it takes are:
#
#  * decrypt service account credentials
#  * install the Google Cloud SDK command line tools (gcloud)
#  * cache the gcloud installation and setup
#  * test and build the go code
#  * on success, deploy the result when the origin branch matches a supported
#    deployment target.
#
# NOTE: Cloud functions only support primitive IAM roles: Owner, Editor, Viewer.
# See: https://cloud.google.com/functions/docs/concepts/iam
# TODO(soltesz): Add deployment automation when fine-grained permissions are
# possible.

language: go

before_install:
# Coverage tools
- go get github.com/mattn/goveralls
- go get github.com/wadey/gocovmerge

# NB: Encrypted values are not defined in forks or pull requests.
# Decrypt the tar archive containing the GCP service account key files.
#
# After unpacking, there should be one service account key file for every GCP
# project referenced in the "deploy" section. These keys authenticate the
# gcloud deploy operations.

- travis/decrypt.sh "$encrypted_361547783275_key" "$encrypted_361547783275_iv"
  keys/service-accounts.tar.enc /tmp/service-accounts.tar /tmp
- echo Branch is ${TRAVIS_BRANCH} and Tag is $TRAVIS_TAG

# Install gcloud, for integration tests.
- $TRAVIS_BUILD_DIR/travis/install_gcloud.sh
- source "${HOME}/google-cloud-sdk/path.bash.inc"

# Install test credentials.
# Note that anyone with github ACLs to push to a branch can hack .travis.yml
# and discover these credentials in the travis logs.
- if [[ -n "$TEST_SERVICE_ACCOUNT_mlab_testing" ]] ; then
  echo $TEST_SERVICE_ACCOUNT_mlab_testing | base64 -d > travis-testing.key ;
  gcloud auth activate-service-account --key-file=travis-testing.key ;
  fi

# These directories will be cached on successful "script" builds, and restored,
# if available, to save time on future builds.
cache:
  directories:
    - "$HOME/google-cloud-sdk/"

script:
# To start, run all the non-integration tests.
# Currently skipping storage tests, because they depend on GCS, and there is
# no emulator.
# TODO - separate storage tests into integration and lightweight.
- MODULES="annotation appengine batch bq dedup etl metrics parser schema storage task web100"
- for module in $MODULES; do
    COVER_PKGS=${COVER_PKGS}./$module/..., ;
  done
- COVER_PKGS=${COVER_PKGS::-1}  # Trim the trailing comma

- for module in $MODULES; do
    go test -v -coverpkg=$COVER_PKGS -coverprofile=$module.cov github.com/m-lab/etl/$module ;
  done

# Rerun modules with integration tests.  This means that some tests are repeated, but otherwise
# we lose some coverage.  The corresponding cov files are overwritten, but that is OK since
# the non-integration tests are repeated.  If we change the unit tests to NOT run when integration
# test tag is set, then we would need to have separate cov files.
# Note: we do not run integration tests from forked PRs b/c the SA is unavailable.
- if [[ -n "$TEST_SERVICE_ACCOUNT_mlab_testing" ]] ; then
  for module in batch dedup ; do
    go test -v -coverpkg=$COVER_PKGS -coverprofile=$module.cov github.com/m-lab/etl/$module -tags=integration ;
  done ;
  fi

# Coveralls
# TODO - figure out why batch.cov isn't being generated above.
# Run "unit tests" with coverage.

# Coveralls
- $HOME/gopath/bin/gocovmerge *.cov > merge.cov
- $HOME/gopath/bin/goveralls -coverprofile=merge.cov -service=travis-ci

# Clean build and prepare for deployment
- cd $TRAVIS_BUILD_DIR/cmd/etl_worker && go build
- $TRAVIS_BUILD_DIR/travis/install_gcloud.sh

#################################################################################
# Deployment Section
#
#  Overview:
#   1.  Test in sandbox during development
#   2.  Deploy to staging on commit to integration
#   3.  Deploy to prod when a branch is tagged with prod-* or xxx-prod-*
#
#  We want to test individual components in sandbox, and avoid stepping on each
#  other, so we do NOT automate deployment to sandbox.  Each person should
#  use a branch name to trigger the single deployment that they are working on.
#
#  We want to soak all code in staging before deploying to prod.  To avoid
#  incompatible components, we deploy ALL elements to staging when we merge
#  to integration branch.
#
#  Deployments to prod are done by deliberately tagging a specific commit,
#  typically in the integration branch, with a tag starting with prod-*.
#  DO NOT just tag the latest version in integration, as someone may have
#  pushed new code that hasn't had a chance to soak in staging.
#
#
# Deploy steps never trigger on a new Pull Request. Deploy steps will trigger
# on specific branch name patterns, after a merge to integration, or on
# an explicit tag that matches "on:" conditions.
#################################################################################

deploy:
######################################################################
## ALL PRODUCTION ETL SERVICES
######################################################################
# STAGING: Automatically deploys all pipeline services on new merge to
# integration branch.
# Deploys all staging services: NDT, NDT_BATCH, PT, SS, DISCO, QUEUE_PUSHER, GARDENER
# NOTE:
#  Failure in one of the deployments will terminate the deployment sequence, leaving
#  the system in a mixed state.  This should be manually addresses ASAP.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-staging.yaml
    && INJECTED_PROJECT=mlab-staging
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh ${INJECTED_PROJECT}
    /tmp/${INJECTED_PROJECT}.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-batch.yaml
    && $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute-staging.yaml
    && $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream-staging.yaml
    && INJECTED_PROJECT=mlab-staging
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-disco.yaml
    && INJECTED_PROJECT=mlab-staging INJECTED_BUCKET=archive-mlab-staging
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/gardener app.yaml
    && $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/appengine/queue_pusher

  skip_cleanup: true
  on:
    repo: m-lab/etl
    branch: integration

# PROD: Should be used AFTER code review, commit to integration, and staging soak.
# Triggers when *ANY* branch is tagged with prod-*'
# Deploys all production services: NDT, NDT_BATCH, PT, SS, QUEUE_PUSHER
# NOTE: See later target for ndt-prod-*, which also triggers on prod-*, and
#       deploys the NDT daily and batch pipelines.
# NOTE: Failure in one of the deployments will terminate the deployment sequence,
#       leaving the system in a mixed state.  This should be manually addresses ASAP.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute-prod.yaml
    && $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream-prod.yaml
    && $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == prod-*

######################################################################
## Service: etl-gardener -- Service that runs various batch jobs, such as
#                           reprocessing and dedupping.
#
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script:
    # These injected params specify the project and bucket used by the service.
    INJECTED_PROJECT=mlab-sandbox INJECTED_BUCKET=archive-mlab-sandbox
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/gardener app.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_BRANCH == gardener-sandbox-* || $TRAVIS_BRANCH == sandbox-*

######################################################################
## Service: etl-disco-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script:
    INJECTED_PROJECT=mlab-sandbox
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-disco.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == disco-sandbox-* || $TRAVIS_BRANCH == sandbox-*

######################################################################
## Service: etl-ndt-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt.yaml
    && INJECTED_PROJECT=mlab-sandbox
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh ${INJECTED_PROJECT}
    /tmp/${INJECTED_PROJECT}.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-batch.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == ndt-sandbox-* || $TRAVIS_BRANCH == sandbox-*

# PROD: Should be used AFTER code review and commit to master branch.
# Triggers when *ANY* branch is tagged with ndt-prod-*'
# Deploys BOTH STREAMING AND BATCH services.
# TODO - group all of the *-prod-* triggers together, same for sandbox, staging.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-prod.yaml
    && INJECTED_PROJECT=measurement-lab
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-batch.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ndt-prod-* || $TRAVIS_TAG == prod-*

######################################################################
## Service: etl-sidestream-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == ss-sandbox-* || $TRAVIS_BRANCH == sandbox-*

# PROD: Should be used AFTER code review and commit to master branch.  Triggers
# when *ANY* branch is tagged with ss-prod-*'
# TODO - collect all of the *-prod-* triggers together.
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream-prod.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ss-prod-*

######################################################################
## Service: etl-traceroute-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == pt-sandbox-* || $TRAVIS_BRANCH == sandbox-*

# PROD: Should be used AFTER code review and commit to master branch.  Triggers
# when *ANY* branch is tagged with pt-prod-*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute-prod.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == pt-prod-*

######################################################################
## Service: queue-pusher -- AppEngine Standard Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    condition: $TRAVIS_BRANCH == qp-sandbox-* || $TRAVIS_BRANCH == sandbox-*

# PROD: After code review and commits to master branch. Triggers when *ANY*
# branch is tagged with qp-prod-*
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    tag: true
    condition: $TRAVIS_TAG == qp-prod-*

## BigQuery Views:
- provider: script
  script:
    # Update these version numbers when making changes to the views.
    # TODO - add feature to allow making aliases from existing intermediate.
    cd $TRAVIS_BUILD_DIR/schema/views_legacysql
    && ./make_views.sh mlab-staging intermediate_v3_1_1 rc_v3_1 "rc release"
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./make_views.sh mlab-staging intermediate_v3_1_1 rc_v3_1 "rc release"
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == views-staging-*

- provider: script
  script:
    # Update these version numbers when making changes to the views.
    # TODO - add feature to allow making aliases from existing intermediate.
    cd $TRAVIS_BUILD_DIR/schema/views_legacysql
    && ./make_views.sh measurement-lab intermediate_v3_1_1 rc_v3_1 "rc release"
    && cd $TRAVIS_BUILD_DIR/schema/views_standardsql
    && ./make_views.sh measurement-lab intermediate_v3_1_1 rc_v3_1 "rc release"
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == views-prod-*
