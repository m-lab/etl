# Travis configuration for etl-worker.
#
# etl-worker is a Go project supporting release automation to mlab-sandbox
# for a single branch in the m-lab/etl repository. The steps it takes are:
#
#  * decrypt service account credentials
#  * install the Google Cloud SDK command line tools (gcloud)
#  * cache the gcloud installation and setup
#  * test and build the go code
#  * on success, deploy the result when the origin branch matches a supported
#    deployment target.
#
language: go

before_install:
# Coverage tools
- go get github.com/mattn/goveralls
- go get github.com/wadey/gocovmerge

# NB: Encrypted values are not defined in forks or pull requests.
# Decrypt the tar archive containing the GCP service account key files.
#
# After unpacking, there should be one service account key file for every GCP
# project referenced in the "deploy" section. These keys authenticate the
# gcloud deploy operations.

- travis/decrypt.sh "$encrypted_361547783275_key" "$encrypted_361547783275_iv"
  keys/service-accounts.tar.enc /tmp/service-accounts.tar /tmp
- echo Branch is ${TRAVIS_BRANCH} and Tag is $TRAVIS_TAG

# These directories will be cached on successful "script" builds, and restored,
# if available, to save time on future builds.
cache:
  directories:
    - "$HOME/google-cloud-sdk/"

script:
# Currently skipping storage tests, because they depend on GCS, and there is
# no emulator.
- go test -covermode=count -coverprofile=bq.cov -v github.com/m-lab/etl/bq
- go test -covermode=count -coverprofile=parser.cov -v github.com/m-lab/etl/parser
- go test -covermode=count -coverprofile=task.cov -v github.com/m-lab/etl/task
- go test -covermode=count -coverprofile=web100.cov -v github.com/m-lab/etl/web100
- go test -covermode=count -coverprofile=qp.cov -v github.com/m-lab/etl/appengine/queue_pusher

# Coveralls
- $HOME/gopath/bin/gocovmerge bq.cov parser.cov task.cov web100.cov qp.cov > merge.cov
- $HOME/gopath/bin/goveralls -coverprofile=merge.cov -service=travis-ci

# Build and prepare for deployment
- cd $TRAVIS_BUILD_DIR/cmd/etl_worker && go build
- $TRAVIS_BUILD_DIR/travis/install_gcloud.sh

# Deploy steps never trigger on a new Pull Request. Deploy steps will trigger
# after a merge with matching "on:" conditions.
deploy:
######################################################################
## Service: etl-disco-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-disco.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == disco-sandbox-*

######################################################################
## Service: etl-ndt-parser -- AppEngine Flexible Environment.
# PERSONAL SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == ndt-sandbox-*

# INTEGRATION: Reviewed code, merged to integration branch, will trigger
# deployment to "standard" mlab-sandbox.
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    branch: integration

# STAGING: Should be used AFTER code review and commit to dev branch.  Triggers
# when *ANY* branch is tagged with ndt-staging-*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-staging.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ndt-staging-*

# PROD: Should be used AFTER code review and commit to master branch.
# Triggers when *ANY* branch is tagged with ndt-prod-*'
# Deploys BOTH STREAMING AND BATCH services.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-prod.yaml &&
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-batch.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ndt-prod-*

# BATCH: Should be used AFTER code review and commit to master branch.
# Triggers when *ANY* branch is tagged with ndt-batch-*'
# Deploys BATCH services.
- provider: script
  script:
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-ndt-batch.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ndt-batch-*

######################################################################
## Service: etl-sidestream-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == ss-sandbox-*

# STAGING: Should be used AFTER code review and commit to dev branch.  Triggers
# when *ANY* branch is tagged with ss-staging*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream-staging.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ss-staging*

# PROD: Should be used AFTER code review and commit to master branch.  Triggers
# when *ANY* branch is tagged with ss-prod-*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-sidestream-prod.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == ss-prod-*

######################################################################
## Service: etl-traceroute-parser -- AppEngine Flexible Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    # A bash-style 'if' condition, matching branches with a "sandbox-" prefix.
    # Sandbox branches will be deployed to personalized service names.
    # Integration branch will not use decorated service names.
    condition: $TRAVIS_BRANCH == pt-sandbox-*

# STAGING: Should be used AFTER code review and commit to dev branch.  Triggers
# when *ANY* branch is tagged with pt-staging-*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute-staging.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == pt-staging-*

# PROD: Should be used AFTER code review and commit to master branch.  Triggers
# when *ANY* branch is tagged with p-prod-*'
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/cmd/etl_worker app-traceroute-prod.yaml
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    condition: $TRAVIS_TAG == pt-prod*

######################################################################
## Service: queue-pusher -- AppEngine Standard Environment.
# SANDBOX: before code review for development code in a specific branch.
- provider: script
  script: $TRAVIS_BUILD_DIR/.personalize_deploy.sh
    $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-sandbox
    /tmp/mlab-sandbox.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    # Consider all branches and match using the condition. By default
    # "all_branches" is false, and the condition is ignored.
    all_branches: true
    condition: $TRAVIS_BRANCH == qp-sandbox-*

# STAGING: After code review and commits to master branch. Triggers when *ANY*
# branch is tagged with qp-staging-*
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-staging
    /tmp/mlab-staging.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    tag: true
    condition: $TRAVIS_TAG == qp-staging-*

# PROD: After code review and commits to master branch. Triggers when *ANY*
# branch is tagged with qp-prod-*
- provider: script
  script: $TRAVIS_BUILD_DIR/travis/deploy_app.sh mlab-oti
    /tmp/mlab-oti.json $TRAVIS_BUILD_DIR/appengine/queue_pusher
  skip_cleanup: true
  on:
    repo: m-lab/etl
    all_branches: true
    tag: true
    condition: $TRAVIS_TAG == qp-prod-*

# NOTE: Cloud functions only support primitive IAM roles: Owner, Editor, Viewer.
# See: https://cloud.google.com/functions/docs/concepts/iam
# TODO(soltesz): Add deployment automation when fine-grained permissions are
# possible.
